---

- name: Get name of local Fabric Mananger RPM
  find:
    path: "{{ playbook_dir }}/release/"
    patterns: 'ufm-*.rpm'
  delegate_to: localhost
  run_once: true
  register: ufm_rpm

- name: Get name of local Fabric Mananger Broker RPM
  find:
    path: "{{ playbook_dir }}/release/"
    patterns: 'ufmbroker-*.rpm'
  delegate_to: localhost
  run_once: true
  register: ufmbroker_rpm

- name: Get name of local Fabric Mananger DEB
  find:
    path: "{{ playbook_dir }}/release/"
    patterns: 'ufm_*.deb'
  delegate_to: localhost
  run_once: true
  register: ufm_deb

- name: Get name of local Fabric Mananger Broker DEB
  find:
    path: "{{ playbook_dir }}/release/"
    patterns: 'ufmbroker_*.deb'
  delegate_to: localhost
  run_once: true
  register: ufmbroker_deb

- name: Fail if packages are missing
  fail:
    msg: "Missing UFM packages. Check `{{ playbook_dir }}/release` and execute build scripts if empty."
  delegate_to: localhost
  run_once: true
  when: >
    ufm_rpm.files[0].path is undefined or
    ufmbroker_rpm.files[0].path is undefined or
    ufm_deb.files[0].path is undefined or
    ufmbroker_deb.files[0].path is undefined

- name: Install FabricManager - CentOS
  import_tasks: ufm_centos.yml
  when: ansible_os_family == 'RedHat'

- name: Install FabricManager - Ubuntu
  import_tasks: ufm_ubuntu.yml
  when: ansible_distribution == 'Ubuntu'

- name: Start Services
  systemd:
    name: "{{ item }}"
    state: started
    enabled: yes
    daemon_reload: yes
  loop:
    - ufm
    - gunicorn
  become: yes

- name: Check that UFM services are running
  service:
    name: "{{ item }}"
  register: service_status
  failed_when: service_status.status.ActiveState != "active"
  loop:
    - ufm_etcd
    - ufm
    - ufm_msg_broker.service
    - gunicorn

- name: Delete RPM/DEB files from Fabric Mananger Hosts
  file:
    path: "{{ ufm_devtest_staging_dir }}/{{ item | basename }}"
    state: absent
  loop:
    - "{{ ufm_rpm.files[0].path }}"
    - "{{ ufmbroker_rpm.files[0].path }}"
    - "{{ ufm_deb.files[0].path }}"
    - "{{ ufmbroker_deb.files[0].path }}"
  loop_control:
    label: "{{ ufm_devtest_staging_dir }}/{{ item | basename }}"
