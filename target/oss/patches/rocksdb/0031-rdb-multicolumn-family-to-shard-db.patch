From a8d640bad480e829c86c203071df51776e3c9b3f Mon Sep 17 00:00:00 2001
From: Jian Liang <jian.l@ssi.samsung.com>
Date: Fri, 12 Feb 2021 19:47:28 -0800
Subject: [PATCH 31/36] * rdb multicolumn family to shard db

---
 db/dss_kv2blk_c.cc | 111 ++++++++++++++++++++++++++++++++++++++---------------
 1 file changed, 81 insertions(+), 30 deletions(-)

diff --git a/db/dss_kv2blk_c.cc b/db/dss_kv2blk_c.cc
index 98c806f..0215283 100644
--- a/db/dss_kv2blk_c.cc
+++ b/db/dss_kv2blk_c.cc
@@ -57,6 +57,7 @@
 #include "util/crc32c.h"
 #include "util/mutexlock.h"
 #include "util/random.h"
+#include "util/hash.h"
 #include "util/stderr_logger.h"
 #include "util/string_util.h"
 #include "util/testutil.h"
@@ -88,7 +89,7 @@ bool g_dss_rdb_exit = false;
 
 pthread_mutex_t list_init_mutex = PTHREAD_MUTEX_INITIALIZER;
 
-int dss_rocksdb_iter_start(void *ctx, void ** piter,
+int dss_rocksdb_iter_start(void *ctx, int cf_idx, void ** piter,
             void * prefix, size_t prefix_size);
 
 int dss_rocksdb_iter_read(void * ctx, void ** piter,
@@ -100,6 +101,7 @@ int dss_rocksdb_iter_end(void *ctx, void * iter);
 namespace rocksdb {
 
 uint32_t g_bg_coreid = 0;
+std::unordered_map<DB *, std::vector<ColumnFamilyHandle*>> g_db2cf;
 
 void rdb_UpdateStats(void)
 {
@@ -163,7 +165,7 @@ struct RandomReadContext : public async::AsyncStatusCapture {
 		  if(user_buffer()){
 			offset_ = (uint64_t)(pinnable_val_.data()) - (uint64_t)val_buffer_;
 			req->dreq->req_value.offset = offset_;
-			if(((uint64_t)(pinnable_val_.data()) < (uint64_t)val_buffer_) || ((uint64_t)(pinnable_val_.data()) > ((uint64_t)val_buffer_) + vlen_)) {
+            if(((uint64_t)(pinnable_val_.data()) < (uint64_t)val_buffer_) || ((uint64_t)(pinnable_val_.data()) > ((uint64_t)val_buffer_) + vlen_)) {
 				if(g_dragonfly->rdb_io_debug_level > 3)
 					DFLY_NOTICELOG("Pinnable buffer %p is different from user buffer %p max copy len %d\n", pinnable_val_.data(), val_buffer_, response->cdw0);
 				goto copy_data;
@@ -258,7 +260,7 @@ void *_dss_rocksdb_open(void *arg)
 
     rocksdb::DB* db;
     rocksdb::Options options;
-
+    rocksdb::Status s;
     std::string dbname = "/mnt/";
     std::string cpumask = "0x1";  //for core 0
     std::string nvme_conf = "/usr/local/etc/spdk/nvme5.conf";
@@ -291,20 +293,51 @@ void *_dss_rocksdb_open(void *arg)
     options.enable_write_thread_adaptive_yield = false;
     */
     options.max_background_jobs = g_dragonfly->rdb_bg_job_cnt;
-    options.max_write_buffer_number = 40;
+    options.max_write_buffer_number = g_dragonfly->rdb_mtable_cnt; //std::max((40/g_dragonfly->rdb_shard_cnt) * 4, 2);
     options.num_levels = 2;
     options.compression = rocksdb::kNoCompression;
     options.target_file_size_base = 1073741824; // 1GB
     options.disable_auto_compactions = !g_dragonfly->rdb_auto_compaction_enable;
     options.min_write_buffer_number_to_merge = 4;
+
     //options.max_open_files = 256;
-    rocksdb::Status s = rocksdb::DB::Open(options, dbname, &db);
-    if (!s.ok()) {
-        DFLY_NOTICELOG("open %s failed\n", s.ToString().c_str());
-        return NULL;
-    }
 
-	dss_dev->rdb_handle->rdb_db_handle = db;
+    std::vector<std::string> families;
+    s = DB::ListColumnFamilies(options, dbname, &families);
+    //printf("ListColumnFamilies %s\n", s.ToString().c_str());
+    if(s.ok()){
+        for(std::string f : families){
+            if(g_dragonfly->rdb_io_debug_level > 0)
+                printf("ListColumnFamilies families %s\n", f.c_str());
+        }
+    }else{
+        s = rocksdb::DB::Open(options, dbname, &db);
+        rocksdb::ColumnFamilyHandle* cf_handle[1024];
+        for(int i=1; i<g_dragonfly->rdb_shard_cnt; i++){
+            std::string column_family_name = "cf_" + std::to_string(i);
+            s = db->CreateColumnFamily(rocksdb::ColumnFamilyOptions(options), column_family_name, &cf_handle[i]);
+            if(g_dragonfly->rdb_io_debug_level > 0)
+                printf("CreateColumnFamily db %p s %s\n", db, s.ToString().c_str());
+        }
+    }
+    std::vector<rocksdb::ColumnFamilyDescriptor> column_families;
+    // have to open default column family
+    column_families.push_back(rocksdb::ColumnFamilyDescriptor(
+      "default", rocksdb::ColumnFamilyOptions(options)));
+   // open the other cfs
+   for(int i=1; i<g_dragonfly->rdb_shard_cnt; i++){
+        std::string column_family_name = "cf_" + std::to_string(i);
+        column_families.push_back(rocksdb::ColumnFamilyDescriptor(
+        column_family_name, rocksdb::ColumnFamilyOptions(options)));
+    }
+   std::vector<rocksdb::ColumnFamilyHandle*> handles;
+   s = rocksdb::DB::Open(options, dbname, column_families, &handles, &db);
+   assert(s.ok());
+   printf("_dss_rocksdb_open: db %p handles %d s %s\n", db, handles.size(),
+    s.ToString().c_str());
+   rocksdb::g_db2cf[db] = handles;
+
+    dss_dev->rdb_handle->rdb_db_handle = db;
 	dss_dev->rdb_handle->rdb_env = (void *)dss_env;
 	DFLY_ASSERT(dss_dev->rdb_handle->rdb_db_handle);
 
@@ -349,6 +382,7 @@ void *_dss_rocksdb_compaction(void *ctx)
 	struct dfly_io_device_s *dss_dev = (struct dfly_io_device_s *)ctx;
 	rocksdb::DB* db = (rocksdb::DB*)dss_dev->rdb_handle->rdb_db_handle;
 	rocksdb::Status s;
+    std::vector<rocksdb::ColumnFamilyHandle*> handles = rocksdb::g_db2cf[db];
 
 	pthread_mutex_lock(&dss_dev->rdb_handle->rdb_lock);
 	if(dss_dev->rdb_handle->compaction_in_progress == false) {
@@ -361,12 +395,18 @@ void *_dss_rocksdb_compaction(void *ctx)
 	pthread_mutex_unlock(&dss_dev->rdb_handle->rdb_lock);
         time_t st, et;
         time(&st);
-	DFLY_NOTICELOG("Compaction started for device %s\n", dss_dev->rdb_handle->dev_name);
+	DFLY_NOTICELOG("Compaction started for device %s \n", dss_dev->rdb_handle->dev_name);
 	//Syncronous compaction (Blocking)
-	s = db->CompactRange(rocksdb::CompactRangeOptions(), nullptr, nullptr);
-	if (!s.ok()) {
-		DFLY_NOTICELOG("Compaction failed %s\n", s.ToString().c_str());
-	}
+	for(int i = 0; i<g_dragonfly->rdb_shard_cnt; i++){
+        DFLY_NOTICELOG("Compaction started for device %s cf %d \n", dss_dev->rdb_handle->dev_name, i);
+	    s = db->CompactRange(rocksdb::CompactRangeOptions(), handles[i], nullptr, nullptr);
+        if (!s.ok()) {
+		    DFLY_NOTICELOG("Compaction failed on device %s rc %s\n", dss_dev->rdb_handle->dev_name, s.ToString().c_str());
+            break;
+	    }
+        DFLY_NOTICELOG("Compaction finished for device %s cf %d \n", dss_dev->rdb_handle->dev_name, i);
+    }
+
 	time(&et);
     DFLY_NOTICELOG("Compaction done for device %s for %d sec\n", dss_dev->rdb_handle->dev_name, et - st);
 
@@ -411,16 +451,19 @@ void * _dss_rocksdb_list_key(void *ctx)
     rocksdb::Slice key_upbound(key, SAMSUNG_KV_MAX_FABRIC_KEY_SIZE+1);
 
     DFLY_NOTICELOG("dss_iter_start on db %p...\n", list_ctx->db);
-    if(!dss_rocksdb_iter_start(list_ctx->db, &iter, list_ctx->prefix, list_ctx->prefix_size)){
-        assert(iter);
-        int key_list_requested = 10000;
-        while(nr_key_iter = dss_rocksdb_iter_read(ctx, &iter,
-            key_list_requested,key_upbound)){
+
+    for(int cf_idx = 0; cf_idx < g_dragonfly->rdb_shard_cnt; cf_idx ++){
+        if(!dss_rocksdb_iter_start(list_ctx->db, cf_idx, &iter, list_ctx->prefix, list_ctx->prefix_size)){
+            assert(iter);
+            int key_list_requested = 10000;
+            while(nr_key_iter = dss_rocksdb_iter_read(ctx, &iter,
+                key_list_requested,key_upbound)){
 	        nr_key_total += nr_key_iter;
-            //printf("list_key updated %d\n", nr_key_total);
+                //printf("list_key updated %d\n", nr_key_total);
+            }
+            assert(!dss_rocksdb_iter_end(ctx, iter));
+            iter = nullptr;
         }
-        assert(!dss_rocksdb_iter_end(ctx, iter));
-        iter = nullptr;
     }
 
     DFLY_NOTICELOG("dss_iter_end  %d keys found\n", nr_key_total);
@@ -466,10 +509,12 @@ int dss_rocksdb_put(void *ctx, void *key, uint32_t klen, void *value, uint32_t v
     rocksdb::WriteOptions write_options = rocksdb::WriteOptions();
     write_options.sync = g_dragonfly->rdb_sync_enable;
     write_options.disableWAL = !g_dragonfly->rdb_wal_enable;
+    std::vector<rocksdb::ColumnFamilyHandle*> handles = rocksdb::g_db2cf[db];
     ++g_put_cnt;
 
    rocksdb::Slice put_key((const char *)key, klen);
-   s = db->Put(write_options, put_key, rocksdb::Slice((char *)value, vlen));
+   int cf_id = rocksdb::Hash((char *)key, klen, 0) % g_dragonfly->rdb_shard_cnt;
+   s = db->Put(write_options, handles[cf_id], put_key, rocksdb::Slice((char *)value, vlen));
    if (!s.ok()) {
 	DFLY_NOTICELOG("Put failed %s\n", s.ToString().c_str());
         ++g_put_miss_cnt;
@@ -490,6 +535,7 @@ void dss_rocksdb_get_async(void * inst_ctx, void *rdb_ctx,
     struct io_thread_inst_ctx_s * inst = (struct io_thread_inst_ctx_s *) inst_ctx;
 	rocksdb::Status s;
 	rocksdb::ReadOptions read_options(false, false);
+    std::vector<rocksdb::ColumnFamilyHandle*> handles = rocksdb::g_db2cf[db];
 	char key_buffer[SAMSUNG_KV_MAX_FABRIC_KEY_SIZE+1] = {0};
     struct rocksdb::AsyncRdQueue_s * RdCtxQueue = (struct rocksdb::AsyncRdQueue_s *)inst->private_data;
         //async read
@@ -526,20 +572,20 @@ void dss_rocksdb_get_async(void * inst_ctx, void *rdb_ctx,
     RdCtx->SetCtxQueue(RdCtxQueue);
 
     s.async(false);
+    int cf_id = rocksdb::Hash((char *)key, klen, 0) % g_dragonfly->rdb_shard_cnt;
 #if 0
     if(!memcmp(key, "meta/", 5)){ //meta data sync read
         s.user_buffer(false);
         std::string get_value;
-        s = db->Get(read_options, RdCtx->key_, &get_value);
+        s = db->Get(read_options, handles[cf_id], RdCtx->key_, &get_value);
         RdCtx->pinnable_val_.PinSelf(rocksdb::Slice(get_value));
         RdCtx->vlen_ = get_value.size();
         RdCtx->OnReadComplete(s);
         return ;
    }
 #endif
-
     s = rocksdb::async::DBImplGetContext::RequestGet(RdCtx->GetCallback(), db, read_options,
-            db->DefaultColumnFamily(), RdCtx->key_, &RdCtx->pinnable_val_, nullptr, value, vbuf_len);
+            handles[cf_id], RdCtx->key_, &RdCtx->pinnable_val_, nullptr, value, vbuf_len);
     if (s.IsIOPending()) {
             //printf("rocksdb async get submitted\n");
         s.async(true);
@@ -560,9 +606,11 @@ int dss_rocksdb_delete(void *ctx, void *key, uint32_t klen)
 	rocksdb::WriteOptions del_options;
     del_options.sync = g_dragonfly->rdb_sync_enable;
     del_options.disableWAL = !g_dragonfly->rdb_wal_enable;
+    std::vector<rocksdb::ColumnFamilyHandle*> handles = rocksdb::g_db2cf[db];
     rocksdb::Slice del_key((char *)key, klen);
     ++g_del_cnt;
-	s = db->Delete(del_options, del_key);
+    int cf_id = rocksdb::Hash((char *)key, klen, 0) % g_dragonfly->rdb_shard_cnt;
+	s = db->Delete(del_options, handles[cf_id], del_key);
     if (!s.ok()) {
         DFLY_NOTICELOG("Delete failed\n");
         return -1;
@@ -573,18 +621,21 @@ int dss_rocksdb_delete(void *ctx, void *key, uint32_t klen)
 	return 0;
 }
 
-int dss_rocksdb_iter_start(void *ctx, void ** piter,
+int dss_rocksdb_iter_start(void *ctx, int cf_idx, void ** piter,
     void * prefix, size_t prefix_size)
 {
     assert(prefix_size <= SAMSUNG_KV_MAX_FABRIC_KEY_SIZE+1);
 
     rocksdb::DB* db = (rocksdb::DB *)ctx;
+    std::vector<rocksdb::ColumnFamilyHandle*> handles = rocksdb::g_db2cf[db];
     rocksdb::ReadOptions options(false, true);
     options.tailing = false;
     options.prefix_same_as_start = true;
     bool use_prefix_iter = true;
+    rocksdb::ColumnFamilyHandle* data_handle = handles[cf_idx]; //meta
+    //printf("dss_rocksdb_iter_start: db %p hanles %p %p\n", db, handles[0], handles[1]);
 
-    rocksdb::Iterator* iter = db->NewIterator(options);
+    rocksdb::Iterator* iter = db->NewIterator(options, data_handle);
 
     char key_buf[SAMSUNG_KV_MAX_FABRIC_KEY_SIZE+1]={0};
     memcpy(key_buf, prefix, prefix_size);
-- 
1.8.3.1

