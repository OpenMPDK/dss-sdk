From 172096e7f9b9638c08d12b93a857a16fa9d8c8e0 Mon Sep 17 00:00:00 2001
From: Benixon Arul dhas <benixon.a@samsung.com>
Date: Tue, 3 Aug 2021 15:25:20 -0700
Subject: [PATCH 40/41] Meta data to cf0 and data to rest

---
 db/dss_kv2blk_c.cc | 34 +++++++++++++++++++++++++---------
 1 file changed, 25 insertions(+), 9 deletions(-)

diff --git a/db/dss_kv2blk_c.cc b/db/dss_kv2blk_c.cc
index 4ddef1b..76949a8 100644
--- a/db/dss_kv2blk_c.cc
+++ b/db/dss_kv2blk_c.cc
@@ -333,7 +333,7 @@ void *_dss_rocksdb_open(void *arg)
 	        abort();
 	    }
         rocksdb::ColumnFamilyHandle* cf_handle[1024];
-        for(int i=1; i<g_dragonfly->rdb_shard_cnt; i++){
+        for(int i=1; i<g_dragonfly->rdb_shard_cnt + 1; i++){
             std::string column_family_name = "cf_" + std::to_string(i);
             s = db->CreateColumnFamily(rocksdb::ColumnFamilyOptions(options), column_family_name, &cf_handle[i]);
             if(g_dragonfly->rdb_io_debug_level > 0)
@@ -345,7 +345,7 @@ void *_dss_rocksdb_open(void *arg)
     column_families.push_back(rocksdb::ColumnFamilyDescriptor(
       "default", rocksdb::ColumnFamilyOptions(options)));
    // open the other cfs
-   for(int i=1; i<g_dragonfly->rdb_shard_cnt; i++){
+   for(int i=1; i<g_dragonfly->rdb_shard_cnt + 1; i++){
         std::string column_family_name = "cf_" + std::to_string(i);
         column_families.push_back(rocksdb::ColumnFamilyDescriptor(
         column_family_name, rocksdb::ColumnFamilyOptions(options)));
@@ -420,7 +420,7 @@ void *_dss_rocksdb_compaction(void *ctx)
         time(&st);
 	DFLY_NOTICELOG("Compaction started for device %s \n", dss_dev->rdb_handle->dev_name);
 	//Syncronous compaction (Blocking)
-	for(int i = 0; i<g_dragonfly->rdb_shard_cnt; i++){
+	for(int i = 0; i<g_dragonfly->rdb_shard_cnt + 1; i++){
         DFLY_NOTICELOG("Compaction started for device %s cf %d \n", dss_dev->rdb_handle->dev_name, i);
         cf_status[i] = rocksdb::RDB_CMPCT_STATUS_PENDING;
 	    s = db->CompactRange(rocksdb::CompactRangeOptions(), handles[i], nullptr, nullptr);
@@ -512,7 +512,7 @@ int dss_rocksdb_direct_iter(void *ctx, struct dfly_request *dfly_req)
     memcpy(key, prefix, plen);
     rocksdb::Slice key_upbound(key, SAMSUNG_KV_MAX_FABRIC_KEY_SIZE+1);
 
-	assert(1 == g_dragonfly->rdb_shard_cnt);//Remove after multi shard min heap support
+	//assert(1 == g_dragonfly->rdb_shard_cnt);//Remove after multi shard min heap support
 
     bool use_prefix_iter = true;
 
@@ -653,7 +653,9 @@ void * _dss_rocksdb_list_key(void *ctx)
 
     DFLY_NOTICELOG("dss_iter_start on db %p...\n", list_ctx->db);
 
-    for(int cf_idx = 0; cf_idx < g_dragonfly->rdb_shard_cnt; cf_idx ++){
+	// Listing for meta only cf_idx = 0
+	int cf_idx = 0;
+    //for(int cf_idx = 0; cf_idx < g_dragonfly->rdb_shard_cnt; cf_idx ++){
         if(!dss_rocksdb_iter_start(list_ctx->db, cf_idx, &iter, list_ctx->prefix, list_ctx->prefix_size)){
             assert(iter);
             int key_list_requested = 10000;
@@ -665,7 +667,7 @@ void * _dss_rocksdb_list_key(void *ctx)
             dss_rocksdb_iter_end(ctx, iter);
             iter = nullptr;
         }
-    }
+    //}
 
     DFLY_NOTICELOG("dss_iter_end  %d keys found\n", nr_key_total);
     if(list_ctx->cb){
@@ -702,6 +704,20 @@ int dss_rocksdb_list_key(void *ctx, void * prefix, size_t prefix_size, list_done
     return LIST_INIT_PENDING;
 }
 
+static inline int _dss_rocksdb_get_cf_idx(char *key, uint32_t klen)
+{
+	if(klen > g_list_prefix_head_size) {
+		if(!strncmp(key, g_list_conf.list_prefix_head, g_list_prefix_head_size)) {
+				return 0;
+			}
+	}
+
+   int cf_id = rocksdb::Hash((char *)key, klen, 0) % g_dragonfly->rdb_shard_cnt;
+	cf_id++;
+
+	return cf_id;
+}
+
 int dss_rocksdb_put(void *ctx, void *key, uint32_t klen, void *value, uint32_t vlen)
 {
     rocksdb::DB* db = (rocksdb::DB *)ctx;
@@ -714,7 +730,7 @@ int dss_rocksdb_put(void *ctx, void *key, uint32_t klen, void *value, uint32_t v
     ++g_put_cnt;
 
    rocksdb::Slice put_key((const char *)key, klen);
-   int cf_id = rocksdb::Hash((char *)key, klen, 0) % g_dragonfly->rdb_shard_cnt;
+   int cf_id = _dss_rocksdb_get_cf_idx((char *)key, klen);
    s = db->Put(write_options, handles[cf_id], put_key, rocksdb::Slice((char *)value, vlen));
    if (!s.ok()) {
 	DFLY_NOTICELOG("Put failed %s\n", s.ToString().c_str());
@@ -774,7 +790,7 @@ void dss_rocksdb_get_async(void * inst_ctx, void *rdb_ctx,
     RdCtx->SetCtxQueue(RdCtxQueue);
 
     s.async(false);
-    int cf_id = rocksdb::Hash((char *)key, klen, 0) % g_dragonfly->rdb_shard_cnt;
+    int cf_id = _dss_rocksdb_get_cf_idx((char *)key, klen);
 #if 1
     //if(!memcmp(key, "meta/", 5)){ //meta data sync read
      if(cf_status[cf_id] == rocksdb::RDB_CMPCT_STATUS_PENDING ||
@@ -814,7 +830,7 @@ int dss_rocksdb_delete(void *ctx, void *key, uint32_t klen)
     std::vector<rocksdb::ColumnFamilyHandle*> handles = rocksdb::g_db2cf[db];
     rocksdb::Slice del_key((char *)key, klen);
     ++g_del_cnt;
-    int cf_id = rocksdb::Hash((char *)key, klen, 0) % g_dragonfly->rdb_shard_cnt;
+    int cf_id = _dss_rocksdb_get_cf_idx((char *)key, klen);
 	s = db->Delete(del_options, handles[cf_id], del_key);
     if (!s.ok()) {
         DFLY_NOTICELOG("Delete failed\n");
-- 
1.8.3.1

