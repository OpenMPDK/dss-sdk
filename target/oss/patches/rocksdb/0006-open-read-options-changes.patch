From 1be93b4ce471385425880955b335e8221f93a581 Mon Sep 17 00:00:00 2001
From: Jian Liang <jian.l@ssi.samsung.com>
Date: Mon, 2 Nov 2020 15:30:28 -0800
Subject: [PATCH 06/21] * open/read options changes * rd context queue per dfly
 instance

---
 db/dss_kv2blk_c.cc | 107 ++++++++++++++++++++++++++++++++++++-----------------
 1 file changed, 73 insertions(+), 34 deletions(-)

diff --git a/db/dss_kv2blk_c.cc b/db/dss_kv2blk_c.cc
index 338a0a0..bf43c00 100644
--- a/db/dss_kv2blk_c.cc
+++ b/db/dss_kv2blk_c.cc
@@ -7,6 +7,7 @@
 #include "rocksdb/db.h"
 #include <fcntl.h>
 
+#include <sched.h>
 #include <inttypes.h>
 #include <stdio.h>
 #include <stdlib.h>
@@ -16,6 +17,7 @@
 #include <functional>
 #include <mutex>
 #include <thread>
+#include <queue>
 #include <unordered_map>
 
 #include "async/async_absorber.h"
@@ -70,11 +72,14 @@ using rocksdb::DB;
 using rocksdb::DBOptions;
 using rocksdb::Options;
 using rocksdb::DBOptions;
+uint32_t max_queue_depth = 1024;
 
 namespace rocksdb {
-
 struct RandomReadContext;
-
+struct AsyncRdQueue_s{
+    std::queue<struct RandomReadContext *>* queue;
+    pthread_mutex_t mutex;
+};
 struct RandomReadContext : public async::AsyncStatusCapture {
 
     RandomReadContext(Slice& key, void *cb, void *cb_arg):
@@ -88,6 +93,9 @@ struct RandomReadContext : public async::AsyncStatusCapture {
     void SetKey(Slice& key){key_ = key;}
     void SetValP(void *val){val_ = val;}
     void SetValLen(uint32_t vlen){vlen_ = vlen;}
+    void SetCb(void *cb){_cb = cb;}
+    void SetArgs(void *args){_cb_arg = args;}
+    void SetCtxQueue(void * queue){ctx_queue_ = (struct AsyncRdQueue_s *)queue;}
 
     async::Callable<Status, const Status&>
       GetCallback() {
@@ -141,6 +149,10 @@ struct RandomReadContext : public async::AsyncStatusCapture {
 		//printf("rocksdb async get done\n");
 	 }
 
+     pthread_mutex_lock(&ctx_queue_->mutex);
+     ctx_queue_->queue->push(this);
+     pthread_mutex_unlock(&ctx_queue_->mutex);
+
      return status;
     }
 
@@ -152,6 +164,7 @@ struct RandomReadContext : public async::AsyncStatusCapture {
 	void				  *_cb;
 	void				  *val_;
 	uint32_t			  vlen_;
+    struct AsyncRdQueue_s * ctx_queue_;
 };
 }
 
@@ -168,7 +181,7 @@ void *_dss_rocksdb_open(void *arg)
     std::string spdk_bdev;
     uint64_t cache_size_in_mb = 8192;
 
-	spdk_bdev += dss_dev->rdb_handle->dev_name;
+    spdk_bdev += dss_dev->rdb_handle->dev_name;
 
 	//printf("Creating new dss ennv\n");
 	rocksdb::Env* dss_env = rocksdb::NewDssEnv(rocksdb::Env::Default(),
@@ -186,12 +199,13 @@ void *_dss_rocksdb_open(void *arg)
     /*
     options.max_subcompactions = 4;
     options.enable_write_thread_adaptive_yield = false;
-    options.compression = rocksdb::kNoCompression;
-    options.num_levels = 2;
-    options.max_write_buffer_number = 20;
-    options.target_file_size_base = 1073741824; // 1GB
     */
 
+    options.max_write_buffer_number = 10;
+    options.num_levels = 2;
+    options.compression = rocksdb::kNoCompression;
+    options.target_file_size_base = 1073741824; // 1GB
+    //options.disable_auto_compactions = true;
     rocksdb::Status s = rocksdb::DB::Open(options, dbname, &db);
     if (!s.ok()) {
         printf("open %s failed\n", s.ToString().c_str());
@@ -221,7 +235,9 @@ void *dss_rocksdb_open(struct dfly_io_device_s *dss_dev)
 void dss_rocksdb_close(void *db)
 {
 	rocksdb::DB *dB = (rocksdb::DB *)db;
+	printf("dss_rocksdb_close %p start ...\n", dB);
 	delete dB;
+	printf("dss_rocksdb_close %p done\n");
 	return;
 }
 
@@ -230,48 +246,72 @@ int dss_rocksdb_put(void *ctx, void *key, uint32_t klen, void *value, uint32_t v
 	    rocksdb::DB* db = (rocksdb::DB *)ctx;
 
 		rocksdb::Status s;
-		rocksdb::WriteOptions write_options;
+		rocksdb::WriteOptions write_options = rocksdb::WriteOptions();
 		write_options.sync = false;
-		write_options.disableWAL = true;
-
+		write_options.disableWAL = false;
+		//printf("dss_rocksdb_put with wal=%d\n", !write_options.disableWAL);
 		s = db->Put(write_options, rocksdb::Slice((char *)key, klen), rocksdb::Slice((char *)value, vlen));
 		if (!s.ok()) {
-			printf("Put failed\n");
+			printf("Put failed %s\n", s.ToString().c_str());
 			return -1;
 		}
 		return 0;
 }
 
-void dss_rocksdb_get_async(void *ctx,
+void dss_rocksdb_get_async(void * inst_ctx, void *rdb_ctx,
 							void *key, size_t klen,
 							void *value, uint32_t vlen,
 							void *cb, void *cb_arg)
 {
-	    rocksdb::DB* db = (rocksdb::DB*)ctx;
-
+	    rocksdb::DB* db = (rocksdb::DB*)rdb_ctx;
+        struct io_thread_inst_ctx_s * inst = (struct io_thread_inst_ctx_s *) inst_ctx;
 		rocksdb::Status s;
-		rocksdb::ReadOptions read_options;
+		rocksdb::ReadOptions read_options(false, false);
 		char key_buffer[16] = {0};
+        struct rocksdb::AsyncRdQueue_s * RdCtxQueue = (struct rocksdb::AsyncRdQueue_s *)inst->private_data;
         //async read
-
+        if(!RdCtxQueue){
+            RdCtxQueue = new struct rocksdb::AsyncRdQueue_s();
+            pthread_mutex_init(&RdCtxQueue->mutex);
+            RdCtxQueue->queue = new std::queue<rocksdb::RandomReadContext *>(max_queue_depth, NULL);
+            for(int idx = 0; idx <max_queue_depth; idx ++){
+                RdCtxQueue->queue->push(new rocksdb::RandomReadContext(idx, NULL, NULL));
+            }
+            inst->private_data = RdCtxQueue;
+        }
         rocksdb::Slice key_async_get((const char *)key, klen);
-        rocksdb::RandomReadContext *RdCtx = new rocksdb::RandomReadContext(0, cb, cb_arg);
+        rocksdb::RandomReadContext *RdCtx = nullptr;
+        pthread_mutex_lock(&RdCtxQueue->mutex);
+        if(!RdCtxQueue->empty()){
+            RdCtx = RdCtxQueue->front();
+            assert(RdCtx);
+            RdCtxQueue->pop();
+            //printf("get RdCtx %p idx %d core %d\n", RdCtx, RdCtx->idx_, sched_getcpu());
+        }else{
+            //printf("RdCtxQueue is Empty\n");
+            assert(false);
+        }
+        pthread_mutex_unlock(&RdCtxQueue->mutex);
+        //rocksdb::RandomReadContext *RdCtx = new rocksdb::RandomReadContext(0, cb, cb_arg);
                 //pickup available ctx (no async pending io ...) TBD
-                RdCtx->SetKey(key_async_get);
-                RdCtx->SetValP(value);
-                RdCtx->SetValLen(vlen);
-                s.async(false);
-                s = rocksdb::async::DBImplGetContext::RequestGet(RdCtx->GetCallback(), db, read_options,
-                    db->DefaultColumnFamily(), RdCtx->key_, &RdCtx->pinnable_val_, nullptr);
-                if (s.IsIOPending()) {
-					//printf("rocksdb async get submitted\n");
-                    s.async(true);
-                } else {
-                    s.async(false);
-                  RdCtx->OnReadComplete(s);
-                }
-
-       delete RdCtx;
+        RdCtx->SetKey(key_async_get);
+        RdCtx->SetValP(value);
+        RdCtx->SetValLen(vlen);
+        RdCtx->SetCb(cb);
+        RdCtx->SetArgs(cb_arg);
+        RdCtx->SetCtxQueue(RdCtxQueue);
+        s.async(false);
+        s = rocksdb::async::DBImplGetContext::RequestGet(RdCtx->GetCallback(), db, read_options,
+            db->DefaultColumnFamily(), RdCtx->key_, &RdCtx->pinnable_val_, nullptr);
+        if (s.IsIOPending()) {
+            //printf("rocksdb async get submitted\n");
+            s.async(true);
+        } else {
+            s.async(false);
+            //printf("rocksdb sync return\n");
+          RdCtx->OnReadComplete(s);
+        }
+
        return;
 
 }
@@ -283,8 +323,7 @@ int dss_rocksdb_delete(void *ctx, void *key, uint32_t klen)
 		rocksdb::Status s;
 		rocksdb::WriteOptions del_options;
 
-		del_options.disableWAL = true;
-
+		del_options.disableWAL = false;
 		s = db->Delete(del_options, rocksdb::Slice((char *)key, klen));
 		if (!s.ok()) {
 			printf("Delete failed\n");
-- 
1.8.3.1

