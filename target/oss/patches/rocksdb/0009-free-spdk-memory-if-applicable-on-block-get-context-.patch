From ad93f746b2f55f160378bb472b748b4071f7ced0 Mon Sep 17 00:00:00 2001
From: Jian Liang <jian.l@ssi.samsung.com>
Date: Fri, 13 Nov 2020 14:51:51 -0800
Subject: [PATCH 09/10]  - free spdk memory if applicable on block get context
 cleanup

---
 table/block.h                     |  8 ++++++++
 table/block_based_table_request.h | 11 +++++++++--
 2 files changed, 17 insertions(+), 2 deletions(-)

diff --git a/table/block.h b/table/block.h
index 733eacd..c6affd6 100644
--- a/table/block.h
+++ b/table/block.h
@@ -139,6 +139,14 @@ class Block {
                  Statistics* statistics = nullptr);
 
   ~Block() = default;
+  
+  void ReleaseBuffer(){
+     if(contents_.spdk_memory && !contents_.user_buffer && contents_.allocation.get()){
+         void * alloc_buffer = contents_.allocation.release();
+         //printf("Block::ReleaseBuffer spdk_free alloc_buffer %p\n", alloc_buffer);
+         spdk_free(alloc_buffer);
+     }
+   }
 
   size_t size() const { return size_; }
   const char* data() const { return data_; }
diff --git a/table/block_based_table_request.h b/table/block_based_table_request.h
index 26f8b5b..7f01f88 100644
--- a/table/block_based_table_request.h
+++ b/table/block_based_table_request.h
@@ -1076,6 +1076,13 @@ class NewDataBlockIteratorHelper {
     return ro_;
   }
 
+ void ReleaseEntry(){
+     if(entry_.value){
+         Block * blk = entry_.value;
+         blk->ReleaseBuffer();
+     }
+   }
+
  private:
 
   // This enum specifies the actions
@@ -1103,7 +1110,7 @@ class NewDataBlockIteratorHelper {
     entry_ = { nullptr, nullptr };
     new_iterator_.reset();
   }
-
+  
   BlockBasedTable::Rep*                 rep_;
   const ReadOptions*                    ro_;
   MaybeLoadDataBlockToCacheHelper       mb_helper_;
@@ -1506,7 +1513,6 @@ class BlockBasedGetContext : private AsyncStatusCapture {
 
       handle_value = iiter->value();
       s = handle.DecodeFrom(&handle_value);
-      //printf("CreateDataBlockIterator handle.offset %d handle.size %d\n", handle.offset(), handle.size());
       if (s.ok()) {
         RecreateBlockIterator();
         s = biter_helper_.Create(on_data_block__cb, handle, &block_iter_, get_context_);
@@ -1534,6 +1540,7 @@ class BlockBasedGetContext : private AsyncStatusCapture {
       Status s(status);
       s.async(true);
       cb_.Invoke(s);
+      biter_helper_.ReleaseEntry();
       delete this;
       return s;
     }
-- 
1.8.3.1

