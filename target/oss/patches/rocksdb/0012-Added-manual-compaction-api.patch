From c57363e27c52a53a2b9ad514d99a02d66e25ff82 Mon Sep 17 00:00:00 2001
From: Benixon Arul dhas <benixon.a@samsung.com>
Date: Wed, 18 Nov 2020 22:31:59 -0800
Subject: [PATCH 12/42] Added manual compaction api

    * Disabled auto compaction
    * New api for manual compaction
---
 db/dss_kv2blk_c.cc             | 42 +++++++++++++++++++++++++++++++++++++++++-
 include/rocksdb/dss_kv2blk_c.h |  1 +
 2 files changed, 42 insertions(+), 1 deletion(-)

diff --git a/db/dss_kv2blk_c.cc b/db/dss_kv2blk_c.cc
index a56a15f..81459be 100644
--- a/db/dss_kv2blk_c.cc
+++ b/db/dss_kv2blk_c.cc
@@ -219,7 +219,7 @@ void *_dss_rocksdb_open(void *arg)
     options.num_levels = 2;
     options.compression = rocksdb::kNoCompression;
     options.target_file_size_base = 1073741824; // 1GB
-    options.disable_auto_compactions = false;
+    options.disable_auto_compactions = true;
     options.min_write_buffer_number_to_merge = 4;
     rocksdb::Status s = rocksdb::DB::Open(options, dbname, &db);
     if (!s.ok()) {
@@ -260,6 +260,46 @@ void dss_rocksdb_close(void *db, void *rdb_env)
 	return;
 }
 
+void *_dss_rocksdb_compaction(void *ctx)
+{
+	struct dfly_io_device_s *dss_dev = (struct dfly_io_device_s *)ctx;
+	rocksdb::DB* db = (rocksdb::DB*)dss_dev->rdb_handle->rdb_db_handle;
+	rocksdb::Status s;
+
+	pthread_mutex_lock(&dss_dev->rdb_handle->rdb_lock);
+	if(dss_dev->rdb_handle->compaction_in_progress == false) {
+		dss_dev->rdb_handle->compaction_in_progress = true;
+	} else {
+		pthread_mutex_unlock(&dss_dev->rdb_handle->rdb_lock);
+		return NULL;
+	}
+
+	pthread_mutex_unlock(&dss_dev->rdb_handle->rdb_lock);
+
+	printf("Compaction started for device %s\n", dss_dev->rdb_handle->dev_name);
+	//Syncronous compaction (Blocking)
+	s = db->CompactRange(rocksdb::CompactRangeOptions(), nullptr, nullptr);
+	if (!s.ok()) {
+		printf("Compaction failed %s\n", s.ToString().c_str());
+	}
+	printf("Compaction done for device %s\n", dss_dev->rdb_handle->dev_name);
+
+	pthread_mutex_lock(&dss_dev->rdb_handle->rdb_lock);
+	dss_dev->rdb_handle->compaction_in_progress = false;
+	pthread_mutex_unlock(&dss_dev->rdb_handle->rdb_lock);
+	//TODO: Callback to make the caller blocking
+	return NULL;
+}
+
+void dss_rocksdb_compaction(void *ctx)
+{
+    pthread_t th;
+    pthread_attr_t attr;
+
+	pthread_attr_init(&attr);
+	pthread_create(&th, &attr, &_dss_rocksdb_compaction, ctx);
+}
+
 int dss_rocksdb_put(void *ctx, void *key, uint32_t klen, void *value, uint32_t vlen)
 {
 	    rocksdb::DB* db = (rocksdb::DB *)ctx;
diff --git a/include/rocksdb/dss_kv2blk_c.h b/include/rocksdb/dss_kv2blk_c.h
index 1a85813..7c9ddd1 100644
--- a/include/rocksdb/dss_kv2blk_c.h
+++ b/include/rocksdb/dss_kv2blk_c.h
@@ -14,6 +14,7 @@ extern int dss_rocksdb_put(void *ctx, void *key, uint32_t klen, void *value, uin
 extern void dss_rocksdb_get_async(void * inst_ctx, void *ctx, void *key, size_t klen, void *value, uint32_t vbuf_len, void *cb, void *cb_arg);
 extern int dss_rocksdb_delete(void *ctx, void *key, uint32_t klen);
 
+extern void dss_rocksdb_compaction(void *ctx);
 #ifdef __cplusplus
 }  /* end extern "C" */
 #endif
-- 
1.8.3.1

