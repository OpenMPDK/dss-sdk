From 88109dbca98f16f58ea376fd85162c8c730d138f Mon Sep 17 00:00:00 2001
From: Benixon Arul dhas <benixon.a@samsung.com>
Date: Mon, 9 Nov 2020 15:34:18 -0800
Subject: [PATCH 09/18] blobfs fix for semaphore crash

---
 lib/blobfs/blobfs.c | 132 +++++++++++++++++++++++++++++++++++-----------------
 1 file changed, 89 insertions(+), 43 deletions(-)

diff --git a/lib/blobfs/blobfs.c b/lib/blobfs/blobfs.c
index be46001..fbc02ee 100644
--- a/lib/blobfs/blobfs.c
+++ b/lib/blobfs/blobfs.c
@@ -65,7 +65,7 @@ static struct spdk_thread *g_cache_pool_thread;
 #define BLOBFS_CACHE_POOL_POLL_PERIOD_IN_US 1000ULL
 static int g_fs_count = 0;
 static pthread_mutex_t g_cache_init_lock = PTHREAD_MUTEX_INITIALIZER;
-
+#define CHANNEL_SEM_MAX 10
 #define TRACE_GROUP_BLOBFS	0x7
 #define TRACE_BLOBFS_XATTR_START	SPDK_TPOINT_ID(TRACE_GROUP_BLOBFS, 0x0)
 #define TRACE_BLOBFS_XATTR_END		SPDK_TPOINT_ID(TRACE_GROUP_BLOBFS, 0x1)
@@ -357,13 +357,14 @@ struct spdk_fs_request {
 struct spdk_fs_channel {
 	struct spdk_fs_request		*req_mem;
 	TAILQ_HEAD(, spdk_fs_request)	reqs;
-	sem_t				sem;
+	sem_t				sem[CHANNEL_SEM_MAX];
 	struct spdk_filesystem		*fs;
 	struct spdk_io_channel		*bs_channel;
 	fs_send_request_fn		send_request;
 	bool				sync;
 	uint32_t			outstanding_reqs;
 	uint32_t icore;
+    int sem_idx;
 	pthread_spinlock_t		lock;
 };
 
@@ -462,6 +463,13 @@ spdk_free_fs_request(void *data)
     free_fs_request((struct spdk_fs_request *)data);
 }
 
+sem_t * fs_channel_get_sem(struct spdk_fs_channel *channel){
+    pthread_spin_lock(&channel->lock);
+    channel->sem_idx = (++channel->sem_idx) % CHANNEL_SEM_MAX;
+    pthread_spin_unlock(&channel->lock);
+    //printf("fs_channel_get_sem[%d] %p\n", channel->sem_idx, &channel->sem[channel->sem_idx]);
+    return &channel->sem[channel->sem_idx];
+}
 
 static int
 fs_channel_create(struct spdk_filesystem *fs, struct spdk_fs_channel *channel,
@@ -476,8 +484,10 @@ fs_channel_create(struct spdk_filesystem *fs, struct spdk_fs_channel *channel,
 
 	channel->outstanding_reqs = 0;
 	TAILQ_INIT(&channel->reqs);
-	sem_init(&channel->sem, 0, 0);
+    for(i=0; i<CHANNEL_SEM_MAX; i++)
+	    sem_init(&channel->sem[i], 0, 0);
 
+    channel->sem_idx = 0;
 	channel->sync = 1;
 	pthread_spin_init(&channel->lock, 0);
 	for (i = 0; i < max_ops; i++) {
@@ -1037,6 +1047,7 @@ spdk_fs_file_stat(struct spdk_filesystem *fs, struct spdk_fs_thread_ctx *ctx,
 {
 	struct spdk_fs_channel *channel = (struct spdk_fs_channel *)ctx;
 	struct spdk_fs_request *req;
+    sem_t * psem = NULL;
 	int rc;
 
 	req = alloc_fs_request(channel);
@@ -1049,9 +1060,10 @@ spdk_fs_file_stat(struct spdk_filesystem *fs, struct spdk_fs_thread_ctx *ctx,
 	req->args.op.stat.name = name;
 	req->args.fn.stat_op = __copy_stat;
 	req->args.arg = stat;
-	req->args.sem = &channel->sem;
+    psem = fs_channel_get_sem(channel);
+    req->args.sem = psem;
 	channel->send_request(__file_stat, req);
-	sem_wait(&channel->sem);
+	sem_wait(psem);
 
 	rc = req->args.rc;
 	free_fs_request(req);
@@ -1194,6 +1206,7 @@ spdk_fs_create_file(struct spdk_filesystem *fs, struct spdk_fs_thread_ctx *ctx,
 	struct spdk_fs_channel *channel = (struct spdk_fs_channel *)ctx;
 	struct spdk_fs_request *req;
 	struct spdk_fs_cb_args *args;
+    sem_t * psem = NULL;
 	int rc;
 
 	SPDK_DEBUGLOG(SPDK_LOG_BLOBFS, "file=%s\n", name);
@@ -1207,9 +1220,10 @@ spdk_fs_create_file(struct spdk_filesystem *fs, struct spdk_fs_thread_ctx *ctx,
 	args = &req->args;
 	args->fs = fs;
 	args->op.create.name = name;
-	args->sem = &channel->sem;
+    psem = fs_channel_get_sem(channel);
+	args->sem = psem;
 	fs->send_request(__fs_create_file, req);
-	sem_wait(&channel->sem);
+	sem_wait(psem);
 	rc = args->rc;
 	free_fs_request(req);
 
@@ -1322,6 +1336,7 @@ __fs_open_file_done(void *arg, struct spdk_file *file, int bserrno)
 
 	args->file = file;
 	args->rc = bserrno;
+	//printf("__fs_open_file_done %s errno %d\n", file->name, bserrno);
 	__wake_caller(args, bserrno);
 	SPDK_DEBUGLOG(SPDK_LOG_BLOBFS, "file=%s\n", args->op.open.name);
 }
@@ -1331,7 +1346,7 @@ __fs_open_file(void *arg)
 {
 	struct spdk_fs_request *req = arg;
 	struct spdk_fs_cb_args *args = &req->args;
-
+	//printf("__fs_open_file %s icore %d\n", args->op.open.name, sched_getcpu());
 	SPDK_DEBUGLOG(SPDK_LOG_BLOBFS, "file=%s\n", args->op.open.name);
 	spdk_fs_open_file_async(args->fs, args->op.open.name, args->op.open.flags,
 				__fs_open_file_done, req);
@@ -1344,6 +1359,7 @@ spdk_fs_open_file(struct spdk_filesystem *fs, struct spdk_fs_thread_ctx *ctx,
 	struct spdk_fs_channel *channel = (struct spdk_fs_channel *)ctx;
 	struct spdk_fs_request *req;
 	struct spdk_fs_cb_args *args;
+    sem_t * psem = NULL;
 	int rc;
 
 	SPDK_DEBUGLOG(SPDK_LOG_BLOBFS, "file=%s\n", name);
@@ -1354,13 +1370,14 @@ spdk_fs_open_file(struct spdk_filesystem *fs, struct spdk_fs_thread_ctx *ctx,
 		return -ENOMEM;
 	}
 	args = &req->args;
-	args->rc = -1;
+	args->rc = -22;
 	args->fs = fs;
 	args->op.open.name = name;
 	args->op.open.flags = flags;
-	args->sem = &channel->sem;
+    psem = fs_channel_get_sem(channel);
+	args->sem = psem;
 	fs->send_request(__fs_open_file, req);
-	sem_wait(&channel->sem);
+	sem_wait(psem);
 	rc = args->rc;
 	if (rc == 0) {
 		*file = args->file;
@@ -1488,6 +1505,7 @@ spdk_fs_rename_file(struct spdk_filesystem *fs, struct spdk_fs_thread_ctx *ctx,
 	struct spdk_fs_channel *channel = (struct spdk_fs_channel *)ctx;
 	struct spdk_fs_request *req;
 	struct spdk_fs_cb_args *args;
+    sem_t * psem = NULL;
 	int rc;
 
 	req = alloc_fs_request(channel);
@@ -1501,9 +1519,10 @@ spdk_fs_rename_file(struct spdk_filesystem *fs, struct spdk_fs_thread_ctx *ctx,
 	args->fs = fs;
 	args->op.rename.old_name = old_name;
 	args->op.rename.new_name = new_name;
-	args->sem = &channel->sem;
+    psem = fs_channel_get_sem(channel);
+	args->sem = psem;
 	fs->send_request(__fs_rename_file, req);
-	sem_wait(&channel->sem);
+	sem_wait(psem);
 	rc = args->rc;
 	free_fs_request(req);
 	return rc;
@@ -1604,6 +1623,7 @@ spdk_fs_delete_file(struct spdk_filesystem *fs, struct spdk_fs_thread_ctx *ctx,
 	struct spdk_fs_channel *channel = (struct spdk_fs_channel *)ctx;
 	struct spdk_fs_request *req;
 	struct spdk_fs_cb_args *args;
+    sem_t * psem = NULL;
 	int rc;
 
 	req = alloc_fs_request(channel);
@@ -1615,9 +1635,10 @@ spdk_fs_delete_file(struct spdk_filesystem *fs, struct spdk_fs_thread_ctx *ctx,
 	args = &req->args;
 	args->fs = fs;
 	args->op.delete.name = name;
-	args->sem = &channel->sem;
+	psem = fs_channel_get_sem(channel);
+    args->sem = psem;
 	fs->send_request(__fs_delete_file, req);
-	sem_wait(&channel->sem);
+	sem_wait(psem);
 	rc = args->rc;
 	free_fs_request(req);
 
@@ -1733,8 +1754,9 @@ spdk_file_truncate_async(struct spdk_file *file, uint64_t length,
 	fs = file->fs;
 
 	num_clusters = __bytes_to_clusters(length, fs->bs_opts.cluster_sz);
-
+	//printf("spdk_file_truncate_async %s length %ld\n", file->name, length);
 	spdk_blob_resize(file->blob, num_clusters, fs_truncate_resize_cb, req);
+	//printf("spdk_file_truncate_async spdk_blob_resize done\n");
 }
 
 static void
@@ -1754,6 +1776,7 @@ spdk_file_truncate(struct spdk_file *file, struct spdk_fs_thread_ctx *ctx,
 	struct spdk_fs_channel *channel = (struct spdk_fs_channel *)ctx;
 	struct spdk_fs_request *req;
 	struct spdk_fs_cb_args *args;
+    sem_t * psem = NULL;
 	int rc;
 
 	req = alloc_fs_request(channel);
@@ -1766,10 +1789,13 @@ spdk_file_truncate(struct spdk_file *file, struct spdk_fs_thread_ctx *ctx,
 	args->file = file;
 	args->op.truncate.length = length;
 	args->fn.file_op = __wake_caller;
-	args->sem = &channel->sem;
+    psem = fs_channel_get_sem(channel);
+	args->sem = psem;
+	//printf("spdk_file_truncate spdk_get_core %d icore %d channel core %d\n",
+	        //spdk_env_get_current_core(), sched_getcpu(), channel->icore);
 
 	channel->send_request(__truncate, req);
-	sem_wait(&channel->sem);
+	sem_wait(psem);
 	rc = args->rc;
 	free_fs_request(req);
 
@@ -2083,6 +2109,7 @@ spdk_fs_set_cache_size(uint64_t size_in_mb)
 	 * is already freed or hasn't been initialized
 	 */
 	if (g_cache_pool != NULL) {
+		abort();
 		return -EPERM;
 	}
 
@@ -2323,6 +2350,7 @@ __file_flush_done(void *ctx, int bserrno)
 	struct spdk_file *file = args->file;
 	struct cache_buffer *next = args->op.flush.cache_buffer;
 
+	//printf("__file_flush_done core %d errno %d\n", sched_getcpu(), bserrno);
 	BLOBFS_TRACE(file, "length=%jx\n", args->op.flush.length);
 	pthread_spin_lock(&file->lock);
 	next->in_progress = false;
@@ -2414,6 +2442,7 @@ __file_flush(void *ctx)
 	BLOBFS_TRACE(file, "offset=0x%jx length=0x%jx page start=0x%jx num=0x%jx\n",
 		     offset, length, start_lba, num_lba);
 	pthread_spin_unlock(&file->lock);
+	//printf("_file_flush %s offset=0x%jx length=0x%jx page start=0x%jx num=0x%jx\n", file->name, offset, length, start_lba, num_lba);
 	spdk_blob_io_write(file->blob, file->fs->sync_target.sync_fs_channel->bs_channel,
 			   next->buf + (start_lba * lba_size) - next->offset,
 			   start_lba, num_lba, __file_flush_done, req);
@@ -2489,9 +2518,10 @@ __rw_from_file2(void *ctx)
 				     args->op.rw.offset, (uint64_t)args->iovs[0].iov_len,
 				     args->fn.file_op, args->arg);
 	} else {
-		spdk_file_write_async(file, file->fs->sync_target.sync_io_channel, args->iovs[0].iov_base,
-				      args->op.rw.offset, (uint64_t)args->iovs[0].iov_len,
-				      __rw_from_file_done, req);
+	    abort(); // should be for read only.
+		//spdk_file_write_async(file, file->fs->sync_target.sync_io_channel, args->iovs[0].iov_base,
+		//		      args->op.rw.offset, (uint64_t)args->iovs[0].iov_len,
+		//		      __rw_from_file_done, req);
 	}
 }
 
@@ -2507,12 +2537,13 @@ __send_rw_from_file_async(struct spdk_file *file, void *payload,
 {
 	struct spdk_fs_request *req;
 	struct spdk_fs_cb_args *args;
-
     struct SpdkFileIOContext * spdk_ctx =
         (struct SpdkFileIOContext *) cb_arg;
 	req = alloc_fs_request_with_iov(channel, 1);
+    assert(req);
 	if (req == NULL) {
-		sem_post(&channel->sem);
+		//sem_post(&channel->sem);
+		abort();
 		return -ENOMEM;
 	}
 
@@ -2521,7 +2552,7 @@ __send_rw_from_file_async(struct spdk_file *file, void *payload,
     args->fn.file_op = cb_fn;
     args->arg = cb_arg;
 	args->file = file;
-	args->sem = &channel->sem;
+	//args->sem = &channel->sem;
 	args->iovs[0].iov_base = payload;
 	args->iovs[0].iov_len = (size_t)length;
 	args->op.rw.offset = offset;
@@ -2533,20 +2564,21 @@ __send_rw_from_file_async(struct spdk_file *file, void *payload,
 static int
 __send_rw_from_file(struct spdk_file *file, void *payload,
 		    uint64_t offset, uint64_t length, bool is_read,
-		    struct spdk_fs_channel *channel)
+		    struct spdk_fs_channel *channel, sem_t * psem)
 {
 	struct spdk_fs_request *req;
 	struct spdk_fs_cb_args *args;
 
 	req = alloc_fs_request_with_iov(channel, 1);
 	if (req == NULL) {
-		sem_post(&channel->sem);
+        assert(psem);
+		sem_post(psem);
 		return -ENOMEM;
 	}
 
 	args = &req->args;
 	args->file = file;
-	args->sem = &channel->sem;
+	args->sem = psem;
 	args->iovs[0].iov_base = payload;
 	args->iovs[0].iov_len = (size_t)length;
 	args->op.rw.offset = offset;
@@ -2566,6 +2598,7 @@ spdk_file_write(struct spdk_file *file, struct spdk_fs_thread_ctx *ctx,
 	uint32_t cache_buffers_filled = 0;
 	uint8_t *cur_payload;
 	struct cache_buffer *last;
+    sem_t * psem = NULL;
 
 	BLOBFS_TRACE_RW(file, "offset=%jx length=%jx\n", offset, length);
 
@@ -2590,8 +2623,10 @@ spdk_file_write(struct spdk_file *file, struct spdk_fs_thread_ctx *ctx,
 
 		file->append_pos += length;
 		pthread_spin_unlock(&file->lock);
-		rc = __send_rw_from_file(file, payload, offset, length, false, channel);
-		sem_wait(&channel->sem);
+        psem = fs_channel_get_sem(channel);
+		//printf("spdk_file_write send_request for __send_rw_from_file on core %d\n", sched_getcpu());
+		rc = __send_rw_from_file(file, payload, offset, length, false, channel, psem);
+		sem_wait(psem);
 		return rc;
 	}
 
@@ -2601,13 +2636,16 @@ spdk_file_write(struct spdk_file *file, struct spdk_fs_thread_ctx *ctx,
 		struct spdk_fs_cb_args extend_args = {};
 
 		cluster_sz = file->fs->bs_opts.cluster_sz;
-		extend_args.sem = &channel->sem;
+        psem = fs_channel_get_sem(channel);
+		extend_args.sem = psem;
 		extend_args.op.resize.num_clusters = __bytes_to_clusters((offset + length), cluster_sz);
 		extend_args.file = file;
 		BLOBFS_TRACE(file, "start resize to %u clusters\n", extend_args.op.resize.num_clusters);
 		pthread_spin_unlock(&file->lock);
+
+		//printf("spdk_file_write send_request for file_extend on core %d\n", sched_getcpu());
 		file->fs->send_request(__file_extend_blob, &extend_args);
-		sem_wait(&channel->sem);
+		sem_wait(psem);
 		if (extend_args.rc) {
 			return extend_args.rc;
 		}
@@ -2659,6 +2697,7 @@ spdk_file_write(struct spdk_file *file, struct spdk_fs_thread_ctx *ctx,
 	}
 
 	flush_req->args.file = file;
+	//printf("spdk_file_write send_request for flush on core %d\n", sched_getcpu());
 	file->fs->send_request(__file_flush, flush_req);
 #endif
 	return 0;
@@ -2758,6 +2797,7 @@ void spdk_sem_wait(sem_t * sem)
     sem_wait(sem);
 }
 
+/*
 int64_t
 spdk_file_read_directio(struct spdk_file *file, struct spdk_fs_thread_ctx *ctx,
 	       void *payload, uint64_t offset, uint64_t length){
@@ -2767,14 +2807,15 @@ spdk_file_read_directio(struct spdk_file *file, struct spdk_fs_thread_ctx *ctx,
      }
      return length;
 }
+*/
 
 int64_t
 spdk_file_read_async2(struct spdk_file *file, struct spdk_fs_thread_ctx *ctx,
 	       void *payload, uint64_t offset, uint64_t length, spdk_file_op_complete cb_fn, void *cb_arg){
 	 struct spdk_fs_channel *channel = (struct spdk_fs_channel *)ctx;
-	 int64_t rc = __send_rw_from_file_async(file, payload, offset, length, true, channel, cb_fn, cb_arg);
-
-	 return rc;
+      //printf("spdk_file_read_async2 core %d channel core %d\n",
+        //	spdk_env_get_current_core(), channel->icore);
+	 return  __send_rw_from_file_async(file, payload, offset, length, true, channel, cb_fn, cb_arg);
 }
 
 int64_t
@@ -2788,6 +2829,7 @@ spdk_file_read(struct spdk_file *file, struct spdk_fs_thread_ctx *ctx,
 	uint64_t read_len;
 	static int cache_hit = 0;
 	int rc = 0;
+    sem_t * psem[CHANNEL_SEM_MAX] = {NULL};
 
 	pthread_spin_lock(&file->lock);
 
@@ -2832,11 +2874,13 @@ spdk_file_read(struct spdk_file *file, struct spdk_fs_thread_ctx *ctx,
 		buf = tree_find_filled_buffer(file->tree, offset);
 		if (buf == NULL) {
 			pthread_spin_unlock(&file->lock);
-			rc = __send_rw_from_file(file, payload, offset, length, true, channel);
+            psem[sub_reads] = fs_channel_get_sem(channel);
+			rc = __send_rw_from_file(file, payload, offset, length, true, channel, psem[sub_reads]);
 			pthread_spin_lock(&file->lock);
 			if (rc == 0) {
 				sub_reads++;
 			}
+            assert(sub_reads < CHANNEL_SEM_MAX);
 		} else {
 			read_len = length;
 			if ((offset + length) > (buf->offset + buf->bytes_filled)) {
@@ -2863,7 +2907,7 @@ spdk_file_read(struct spdk_file *file, struct spdk_fs_thread_ctx *ctx,
 	}
 	pthread_spin_unlock(&file->lock);
 	while (sub_reads > 0) {
-		spdk_sem_wait(&channel->sem);
+		spdk_sem_wait(psem[sub_reads-1]);
 		sub_reads--;
 	}
 	if (rc == 0) {
@@ -2928,10 +2972,10 @@ spdk_file_sync(struct spdk_file *file, struct spdk_fs_thread_ctx *ctx)
 {
 	struct spdk_fs_channel *channel = (struct spdk_fs_channel *)ctx;
 	struct spdk_fs_cb_args args = {};
-
-	args.sem = &channel->sem;
+    sem_t * psem = fs_channel_get_sem(channel);
+	args.sem = psem;
 	_file_sync(file, channel, __wake_caller, &args);
-	sem_wait(&channel->sem);
+	sem_wait(psem);
 
 	return args.rc;
 }
@@ -3049,6 +3093,7 @@ spdk_file_close(struct spdk_file *file, struct spdk_fs_thread_ctx *ctx)
 	struct spdk_fs_channel *channel = (struct spdk_fs_channel *)ctx;
 	struct spdk_fs_request *req;
 	struct spdk_fs_cb_args *args;
+    sem_t * psem = NULL;
 
 	req = alloc_fs_request(channel);
 	if (req == NULL) {
@@ -3062,12 +3107,13 @@ spdk_file_close(struct spdk_file *file, struct spdk_fs_thread_ctx *ctx)
 	spdk_file_sync(file, ctx);
 	BLOBFS_TRACE(file, "name=%s\n", file->name);
 	args->file = file;
-	args->sem = &channel->sem;
-	//args->fn.file_op = __wake_caller;
-	args->fn.file_op = __release_caller;
+    psem = fs_channel_get_sem(channel);
+	args->sem = psem;
+	args->fn.file_op = __wake_caller;
+	//args->fn.file_op = __release_caller;
 	args->arg = args;
 	channel->send_request(__file_close, req);
-	//sem_wait(&channel->sem);
+	sem_wait(psem);
 
 	while(args->rc == -SPDK_FILE_IO_UNDEFINED_ERRNO)
 		usleep(100);
-- 
1.8.3.1

