From 61eb20b1b7a123f98713d9d0f3f6ff34523d87e3 Mon Sep 17 00:00:00 2001
From: Benixon Arul dhas <benixon.a@samsung.com>
Date: Wed, 18 Nov 2020 22:34:00 -0800
Subject: [PATCH 13/55] Add dss rpc python scripts

    * Comment devbug prints
    * Add dss rpc from master
    * Add support for compaction via rpc
---
 lib/rocksdb/env_dss.cc         |  2 +-
 scripts/dss_rpc.py             | 80 ++++++++++++++++++++++++++++++++++
 scripts/rpc/__init__.py        |  1 +
 scripts/rpc/latency_profile.py | 45 +++++++++++++++++++
 4 files changed, 127 insertions(+), 1 deletion(-)
 create mode 100755 scripts/dss_rpc.py
 create mode 100644 scripts/rpc/latency_profile.py

diff --git a/lib/rocksdb/env_dss.cc b/lib/rocksdb/env_dss.cc
index f50416ce7..91279d7bb 100644
--- a/lib/rocksdb/env_dss.cc
+++ b/lib/rocksdb/env_dss.cc
@@ -442,7 +442,7 @@ public:
 			struct spdk_file *file;
 			int rc;
 
-			printf("name %s --> %s\n", fname.c_str(), name.c_str());
+			//printf("name %s --> %s\n", fname.c_str(), name.c_str());
 			rc = spdk_fs_open_file(mSpdkFS, mSpdkFsCh,
 					       name.c_str(), 0, &file);
 			if (rc == 0) {
diff --git a/scripts/dss_rpc.py b/scripts/dss_rpc.py
new file mode 100755
index 000000000..46ee95129
--- /dev/null
+++ b/scripts/dss_rpc.py
@@ -0,0 +1,80 @@
+#!/usr/bin/env python3
+
+from rpc.client import print_dict, print_json, JSONRPCException
+from rpc.helpers import deprecated_aliases
+
+import logging
+import argparse
+import rpc
+import sys
+
+try:
+    from shlex import quote
+except ImportError:
+    from pipes import quote
+
+
+def print_array(a):
+    print(" ".join((quote(v) for v in a)))
+
+
+if __name__ == "__main__":
+    parser = argparse.ArgumentParser(
+        description='DSS RPC command line interface')
+    parser.add_argument('-s', dest='server_addr',
+                        help='RPC server address', default='/var/tmp/spdk.sock')
+    parser.add_argument('-p', dest='port',
+                        help='RPC port number (if server_addr is IP address)',
+                        default=5260, type=int)
+    parser.add_argument('-t', dest='timeout',
+                        help='Timout as a floating point number expressed in seconds waiting for reponse. Default: 60.0',
+                        default=60.0, type=float)
+    parser.add_argument('-r', dest='conn_retries',
+                        help='Retry connecting to the RPC server N times with 0.2s interval. Default: 0',
+                        default=0, type=int)
+    parser.add_argument('-v', dest='verbose', action='store_const', const="INFO",
+                        help='Set verbose mode to INFO', default="ERROR")
+    parser.add_argument('--verbose', dest='verbose', choices=['DEBUG', 'INFO', 'ERROR'],
+                        help="""Set verbose level. """)
+    subparsers = parser.add_subparsers(help='RPC methods')
+
+    def get_qpair_latency_profile(args):
+        print_dict(rpc.latency_profile.get_qpair_latency_profile(args.client,
+                                                      nqn=args.nqn,
+                                                      cid=args.cid,
+                                                      qid=args.qid))
+
+    p = subparsers.add_parser('get_qpair_latency_profile', help='Get the latency profile infrmation of specific qpair')
+    p.add_argument('-n', '--nqn', help='NVMe-oF target nqn')
+    p.add_argument('-c', '--cid', help='NVMe-oF target subnqn controller ID', type=int)
+    p.add_argument('-q', '--qid', help='NVMe-oF target subnqn controller qpair ID', type=int)
+    p.set_defaults(func=get_qpair_latency_profile)
+
+    def reset_ustat_counters(args):
+        print_dict(rpc.latency_profile.reset_ustat_counters(args.client,
+                                                      nqn=args.nqn))
+
+    p = subparsers.add_parser('reset_ustat_counters', help='Reset ustat counters for NVMEoF subsystem')
+    p.add_argument('-n', '--nqn', help='NVMe-oF target nqn')
+    p.set_defaults(func=reset_ustat_counters)
+
+    def dss_rdb_compact(args):
+        print_dict(rpc.latency_profile.dss_rdb_compact(args.client,
+                                                      nqn=args.nqn))
+
+    p = subparsers.add_parser('rdb_compact', help='Compact rdb block devices for NVMEoF subsystem')
+    p.add_argument('-n', '--nqn', help='NVMe-oF target nqn')
+    p.set_defaults(func=dss_rdb_compact)
+
+    args = parser.parse_args()
+
+
+    try:
+        args.client = rpc.client.JSONRPCClient(args.server_addr, args.port, args.timeout,
+                                               log_level=getattr(logging, args.verbose.upper()),
+                                               conn_retries=args.conn_retries)
+        args.func(args)
+    except JSONRPCException as ex:
+        print("Exception:")
+        print(ex.message)
+        exit(1)
diff --git a/scripts/rpc/__init__.py b/scripts/rpc/__init__.py
index f764d7ae5..7279df4cb 100644
--- a/scripts/rpc/__init__.py
+++ b/scripts/rpc/__init__.py
@@ -25,6 +25,7 @@ from . import vhost
 from . import vmd
 from . import sock
 from . import client as rpc_client
+from . import latency_profile
 from .helpers import deprecated_alias
 
 
diff --git a/scripts/rpc/latency_profile.py b/scripts/rpc/latency_profile.py
new file mode 100644
index 000000000..9f82ee3e8
--- /dev/null
+++ b/scripts/rpc/latency_profile.py
@@ -0,0 +1,45 @@
+def get_qpair_latency_profile(client, nqn, cid, qid):
+    """Get latency profile information for an NVMe-oF subsystem/
+
+    Args:
+        nqn: Subsystem NQN
+        cid: Controller ID
+        qid: Qpair ID
+
+    Returns:
+	    Qpair latency profile details
+    """
+
+    params = {'nqn': nqn,
+              'cid': cid,
+              'qid': qid}
+
+    return client.call('dss_get_latency_profile', params)
+
+def reset_ustat_counters(client, nqn):
+	"""Reset ustat counters for an NVMEoF subsystem
+
+	Args:
+		nqn: Subsystem NQN
+
+	Returns:
+		true when reset is done
+	"""
+
+	params = {'nqn': nqn}
+
+	return client.call('dss_reset_ustat_counters', params)
+
+def dss_rdb_compact(client, nqn):
+	"""Do compaction for rdb block devices in an NVMEoF subsystem
+
+	Args:
+		nqn: Subsystem NQN
+
+	Returns:
+		true compaction is started
+	"""
+
+	params = {'nqn': nqn}
+
+	return client.call('dss_rdb_compact', params)
-- 
2.24.3

