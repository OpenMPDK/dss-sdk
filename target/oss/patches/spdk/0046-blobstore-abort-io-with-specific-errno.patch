From e029854cceaea3de6c6876af7b4cf2ea2243d3e0 Mon Sep 17 00:00:00 2001
From: Jian Liang <jian.l@ssi.samsung.com>
Date: Thu, 6 May 2021 14:57:07 -0700
Subject: [PATCH 46/71] * blobstore abort io with specific errno. * thin
 provision check the enough space on resize

---
 lib/blob/blobstore.c | 19 +++++++++----------
 lib/blob/request.c   |  9 +++++----
 lib/blob/request.h   |  2 +-
 3 files changed, 15 insertions(+), 15 deletions(-)

diff --git a/lib/blob/blobstore.c b/lib/blob/blobstore.c
index c1196ac2d..d220d3c88 100644
--- a/lib/blob/blobstore.c
+++ b/lib/blob/blobstore.c
@@ -141,7 +141,6 @@ bs_allocate_cluster(struct spdk_blob *blob, uint32_t cluster_num,
 		    uint64_t *lowest_free_cluster, uint32_t *lowest_free_md_page, bool update_map)
 {
 	uint32_t *extent_page = 0;
-
 	pthread_mutex_lock(&blob->bs->used_clusters_mutex);
 	*lowest_free_cluster = spdk_bit_array_find_first_clear(blob->bs->used_clusters,
 			       *lowest_free_cluster);
@@ -1597,7 +1596,6 @@ blob_persist_clear_clusters_cpl(spdk_bs_sequence_t *seq, void *cb_arg, int bserr
 	struct spdk_blob		*blob = ctx->blob;
 	struct spdk_blob_store		*bs = blob->bs;
 	size_t				i;
-
 	if (bserrno != 0) {
 		blob_persist_complete(seq, ctx, bserrno);
 		return;
@@ -1886,7 +1884,7 @@ blob_resize(struct spdk_blob *blob, uint64_t sz)
 	 * and md pages, another to actually claim them.
 	 */
 
-	if (spdk_blob_is_thin_provisioned(blob) == false) {
+	if (true || spdk_blob_is_thin_provisioned(blob) == false) { //check enough space in thin provision as well
 		lfc = 0;
 		for (i = num_clusters; i < sz; i++) {
 			lfc = spdk_bit_array_find_first_clear(bs->used_clusters, lfc);
@@ -2206,7 +2204,7 @@ blob_allocate_and_copy_cluster_cpl(void *cb_arg, int bserrno)
 		if (bserrno == 0) {
 			bs_user_op_execute(op);
 		} else {
-			bs_user_op_abort(op);
+			bs_user_op_abort(op, -EIO);
 		}
 	}
 
@@ -2302,7 +2300,7 @@ bs_allocate_and_copy_cluster(struct spdk_blob *blob,
 
 	ctx = calloc(1, sizeof(*ctx));
 	if (!ctx) {
-		bs_user_op_abort(op);
+		bs_user_op_abort(op, -ENOMEM);
 		return;
 	}
 
@@ -2318,7 +2316,7 @@ bs_allocate_and_copy_cluster(struct spdk_blob *blob,
 			SPDK_ERRLOG("DMA allocation for cluster of size = %" PRIu32 " failed.\n",
 				    blob->bs->cluster_sz);
 			free(ctx);
-			bs_user_op_abort(op);
+			bs_user_op_abort(op, -ENOMEM);
 			return;
 		}
 	}
@@ -2326,9 +2324,10 @@ bs_allocate_and_copy_cluster(struct spdk_blob *blob,
 	rc = bs_allocate_cluster(blob, cluster_number, &ctx->new_cluster, &ctx->new_extent_page,
 				 false);
 	if (rc != 0) {
+		SPDK_ERRLOG("bs_allocate_cluster failed rc %d\n", rc);
 		spdk_free(ctx->buf);
 		free(ctx);
-		bs_user_op_abort(op);
+		bs_user_op_abort(op, rc);
 		return;
 	}
 
@@ -2341,7 +2340,7 @@ bs_allocate_and_copy_cluster(struct spdk_blob *blob,
 		bs_release_cluster(blob->bs, ctx->new_cluster);
 		spdk_free(ctx->buf);
 		free(ctx);
-		bs_user_op_abort(op);
+		bs_user_op_abort(op, -EIO);
 		return;
 	}
 
@@ -2934,13 +2933,13 @@ bs_channel_destroy(void *io_device, void *ctx_buf)
 	while (!TAILQ_EMPTY(&channel->need_cluster_alloc)) {
 		op = TAILQ_FIRST(&channel->need_cluster_alloc);
 		TAILQ_REMOVE(&channel->need_cluster_alloc, op, link);
-		bs_user_op_abort(op);
+		bs_user_op_abort(op, -EIO);
 	}
 
 	while (!TAILQ_EMPTY(&channel->queued_io)) {
 		op = TAILQ_FIRST(&channel->queued_io);
 		TAILQ_REMOVE(&channel->queued_io, op, link);
-		bs_user_op_abort(op);
+		bs_user_op_abort(op, -EIO);
 	}
 
 	free(channel->req_mem);
diff --git a/lib/blob/request.c b/lib/blob/request.c
index 0975bcf24..875b9edc9 100644
--- a/lib/blob/request.c
+++ b/lib/blob/request.c
@@ -166,13 +166,13 @@ bs_sequence_write_dev(spdk_bs_sequence_t *seq, void *payload,
 {
 	struct spdk_bs_request_set      *set = (struct spdk_bs_request_set *)seq;
 	struct spdk_bs_channel       *channel = set->channel;
-
 	SPDK_DEBUGLOG(SPDK_LOG_BLOB_RW, "Writing %" PRIu32 " blocks from LBA %" PRIu64 "\n", lba_count,
 		      lba);
 
 	set->u.sequence.cb_fn = cb_fn;
 	set->u.sequence.cb_arg = cb_arg;
 
+
 	channel->dev->write(channel->dev, channel->dev_channel, payload, lba, lba_count,
 			    &set->cb_args);
 }
@@ -494,13 +494,14 @@ bs_user_op_execute(spdk_bs_user_op_t *op)
 }
 
 void
-bs_user_op_abort(spdk_bs_user_op_t *op)
+bs_user_op_abort(spdk_bs_user_op_t *op, int berrno)
 {
 	struct spdk_bs_request_set	*set;
 
 	set = (struct spdk_bs_request_set *)op;
-
-	set->cpl.u.blob_basic.cb_fn(set->cpl.u.blob_basic.cb_arg, -EIO);
+	//-EIO by default
+	//set->cpl.u.blob_basic.cb_fn(set->cpl.u.blob_basic.cb_arg, -EIO);
+	set->cpl.u.blob_basic.cb_fn(set->cpl.u.blob_basic.cb_arg, berrno);
 	TAILQ_INSERT_TAIL(&set->channel->reqs, set, link);
 }
 
diff --git a/lib/blob/request.h b/lib/blob/request.h
index 81dc161db..f5263b7a7 100644
--- a/lib/blob/request.h
+++ b/lib/blob/request.h
@@ -210,7 +210,7 @@ spdk_bs_user_op_t *bs_user_op_alloc(struct spdk_io_channel *channel, struct spdk
 
 void bs_user_op_execute(spdk_bs_user_op_t *op);
 
-void bs_user_op_abort(spdk_bs_user_op_t *op);
+void bs_user_op_abort(spdk_bs_user_op_t *op, int berrno);
 
 void bs_sequence_to_batch_completion(void *cb_arg, int bserrno);
 
-- 
2.24.3

