From 57652d42f48cfcac4d411ec63ce6338dcae8459a Mon Sep 17 00:00:00 2001
From: Jian Liang <jian.l@ssi.samsung.com>
Date: Tue, 15 Dec 2020 20:25:47 -0800
Subject: [PATCH 15/54] * bdev blocksize support * increment nr of the
 blobstore request to 4k

---
 include/spdk/blobfs.h  |  2 ++
 lib/blob/blobstore.h   |  2 +-
 lib/blobfs/blobfs.c    | 10 ++++++++--
 lib/rocksdb/env_dss.cc | 12 +++++++++---
 4 files changed, 20 insertions(+), 6 deletions(-)

diff --git a/include/spdk/blobfs.h b/include/spdk/blobfs.h
index 9a67d62..c83ced0 100644
--- a/include/spdk/blobfs.h
+++ b/include/spdk/blobfs.h
@@ -369,6 +369,8 @@ int64_t spdk_file_read_async2(struct spdk_file *file, struct spdk_fs_thread_ctx
 
 void spdk_free_fs_request(void *data);
 
+uint32_t spdk_fs_get_lba_size(struct spdk_filesystem *fs);
+
 
 /**
  * Set cache size for the blobstore filesystem.
diff --git a/lib/blob/blobstore.h b/lib/blob/blobstore.h
index 5e93bd6..4556467 100644
--- a/lib/blob/blobstore.h
+++ b/lib/blob/blobstore.h
@@ -49,7 +49,7 @@
 #define SPDK_BLOB_OPTS_CLUSTER_SZ (1024 * 1024)
 #define SPDK_BLOB_OPTS_NUM_MD_PAGES UINT32_MAX
 #define SPDK_BLOB_OPTS_MAX_MD_OPS 32
-#define SPDK_BLOB_OPTS_DEFAULT_CHANNEL_OPS 512
+#define SPDK_BLOB_OPTS_DEFAULT_CHANNEL_OPS 4096
 #define SPDK_BLOB_BLOBID_HIGH_BIT (1ULL << 32)
 
 struct spdk_xattr {
diff --git a/lib/blobfs/blobfs.c b/lib/blobfs/blobfs.c
index 0cb219c..536f374 100644
--- a/lib/blobfs/blobfs.c
+++ b/lib/blobfs/blobfs.c
@@ -1854,8 +1854,9 @@ __read_done(void *ctx, int bserrno)
 
 	assert(req != NULL);
 	buf = (void *)((uintptr_t)args->op.rw.pin_buf + (args->op.rw.offset & (args->op.rw.blocklen - 1)));
-        if (args->op.rw.is_read) {
-		if(args->fn.file_op == __rw_from_file_done){
+
+       if (args->op.rw.is_read) {
+	        if(args->fn.file_op == __rw_from_file_done){
 			_copy_buf_to_iovs(args->iovs, args->iovcnt, buf, args->op.rw.length);
 		}
 		__rw_done(req, 0);
@@ -2124,6 +2125,11 @@ spdk_fs_get_cache_size(void)
 	return g_fs_cache_size / (1024 * 1024);
 }
 
+uint32_t spdk_fs_get_lba_size(struct spdk_filesystem *fs)
+{
+    return spdk_bs_get_io_unit_size(fs->bs);
+}
+
 static void __file_flush(void *ctx);
 
 /* Try to free some cache buffers from this file.
diff --git a/lib/rocksdb/env_dss.cc b/lib/rocksdb/env_dss.cc
index 91279d7..2d1f14c 100644
--- a/lib/rocksdb/env_dss.cc
+++ b/lib/rocksdb/env_dss.cc
@@ -216,10 +216,10 @@ DpdkRandomAccessFile::AsyncReadCallback(void* ctx, int bserrno){
     struct DpdkRandomAccessFileContext * spdk_ctx =
         (struct DpdkRandomAccessFileContext *)ctx;
     Status s;
-    Slice slice(spdk_ctx->buffer + (spdk_ctx->offset & 511), spdk_ctx->byte_read);
+    uint32_t lba_size = spdk_fs_get_lba_size(spdk_ctx->file->fs);
+    Slice slice(spdk_ctx->buffer + (spdk_ctx->offset & (lba_size - 1)), spdk_ctx->byte_read);
     if(!bserrno)
         s.async(true);
-
     spdk_free_fs_request(spdk_ctx->data);
     spdk_ctx->cb.Invoke(s, slice);
 
@@ -397,6 +397,7 @@ private:
 	struct spdk_filesystem *mSpdkFS;
 	struct spdk_fs_thread_ctx *mSpdkFsCh;
 	uint32_t mCore;
+    uint32_t mFsIoUnitSize;
 
 public:
 	DssEnv(Env *base_env, const std::string &dir,
@@ -442,7 +443,7 @@ public:
 			struct spdk_file *file;
 			int rc;
 
-			//printf("name %s --> %s\n", fname.c_str(), name.c_str());
+			printf("name %s --> %s\n", fname.c_str(), name.c_str());
 			rc = spdk_fs_open_file(mSpdkFS, mSpdkFsCh,
 					       name.c_str(), 0, &file);
 			if (rc == 0) {
@@ -524,6 +525,11 @@ public:
 	{
 		return Status::NotSupported("DssEnv does not support LinkFile");
 	}
+
+    virtual uint32_t GetFileSystemBlockSize(void)
+    {
+        return spdk_fs_get_lba_size(mSpdkFS);
+    }
 	virtual Status GetFileSize(const std::string &fname, uint64_t *size) override
 	{
 		struct spdk_file_stat stat;
-- 
1.8.3.1

