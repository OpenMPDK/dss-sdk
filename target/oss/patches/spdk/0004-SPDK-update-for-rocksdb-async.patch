From 2c05b21d134027eaa33a28690ec883b864cecc52 Mon Sep 17 00:00:00 2001
From: Jian Liang <jian.l@ssi.samsung.com>
Date: Tue, 21 Jul 2020 02:43:57 -0700
Subject: [PATCH 04/16] SPDK update for rocksdb async

    * async blobfs read
    * add blobfs.2.h for db_bench build
    *  spdk malloc for async read buffer
    * spdk_mempool for async read buffer
    * delay flush on blobfs write (diabled by default)
    * spdk_cpumask option ( db_bench --spdk_cpumask=0x1 for core0, example)
---
 include/spdk/blobfs.h   |  10 +++
 lib/blobfs/blobfs.c     | 171 ++++++++++++++++++++++++++++++++++++++++++------
 lib/rocksdb/blobfs.2.h  |  70 ++++++++++++++++++++
 lib/rocksdb/env_spdk.cc | 141 ++++++++++++++++++++++++++++++++++++---
 4 files changed, 361 insertions(+), 31 deletions(-)
 create mode 100644 lib/rocksdb/blobfs.2.h

diff --git a/include/spdk/blobfs.h b/include/spdk/blobfs.h
index 2a4342d..9a67d62 100644
--- a/include/spdk/blobfs.h
+++ b/include/spdk/blobfs.h
@@ -360,6 +360,16 @@ int spdk_file_write(struct spdk_file *file, struct spdk_fs_thread_ctx *ctx,
 int64_t spdk_file_read(struct spdk_file *file, struct spdk_fs_thread_ctx *ctx,
 		       void *payload, uint64_t offset, uint64_t length);
 
+int64_t spdk_file_read_directio(struct spdk_file *file, struct spdk_fs_thread_ctx *ctx,
+		       void *payload, uint64_t offset, uint64_t length);
+
+int64_t spdk_file_read_async2(struct spdk_file *file, struct spdk_fs_thread_ctx *ctx,
+		       void *payload, uint64_t offset, uint64_t length,
+		       spdk_file_op_complete cb_fn, void *cb_arg);
+
+void spdk_free_fs_request(void *data);
+
+
 /**
  * Set cache size for the blobstore filesystem.
  *
diff --git a/lib/blobfs/blobfs.c b/lib/blobfs/blobfs.c
index 3af6b06..1bc7379 100644
--- a/lib/blobfs/blobfs.c
+++ b/lib/blobfs/blobfs.c
@@ -31,6 +31,7 @@
  *   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
+#include <sched.h>
 #include "spdk/stdinc.h"
 
 #include "spdk/blobfs.h"
@@ -114,7 +115,8 @@ cache_buffer_free(struct cache_buffer *cache_buffer)
 	free(cache_buffer);
 }
 
-#define CACHE_READAHEAD_THRESHOLD	(128 * 1024)
+//#define CACHE_READAHEAD_THRESHOLD	(128 * 1024)
+#define CACHE_READAHEAD_THRESHOLD	(4096)
 
 struct spdk_file {
 	struct spdk_filesystem	*fs;
@@ -260,6 +262,7 @@ spdk_fs_opts_init(struct spdk_blobfs_opts *opts)
 }
 
 static int _blobfs_cache_pool_reclaim(void *arg);
+static void __rw_from_file_done(void *ctx, int bserrno);
 
 static bool
 blobfs_cache_pool_need_reclaim(void)
@@ -270,7 +273,7 @@ blobfs_cache_pool_need_reclaim(void)
 	/* We define a aggressive policy here as the requirements from db_bench are batched, so start the poller
 	 *  when the number of available cache buffer is less than 1/5 of total buffers.
 	 */
-	if (count > (size_t)g_fs_cache_size / CACHE_BUFFER_SIZE / 5) {
+	if (count > (size_t)g_fs_cache_size / CACHE_BUFFER_SIZE /10 ) {
 		return false;
 	}
 
@@ -397,7 +400,7 @@ alloc_fs_request_with_iov(struct spdk_fs_channel *channel, uint32_t iovcnt)
 	}
 
 	if (req == NULL) {
-		SPDK_ERRLOG("Cannot allocate req on spdk_fs_channel =%p\n", channel);
+		SPDK_ERRLOG("Cannot allocate req on spdk_fs_channel =%p, outstanding reqs %u\n", channel, channel->outstanding_reqs);
 		free(iovs);
 		return NULL;
 	}
@@ -440,6 +443,13 @@ free_fs_request(struct spdk_fs_request *req)
 	}
 }
 
+void
+spdk_free_fs_request(void *data)
+{
+    free_fs_request((struct spdk_fs_request *)data);
+}
+
+
 static int
 fs_channel_create(struct spdk_filesystem *fs, struct spdk_fs_channel *channel,
 		  uint32_t max_ops)
@@ -455,6 +465,8 @@ fs_channel_create(struct spdk_filesystem *fs, struct spdk_fs_channel *channel,
 	TAILQ_INIT(&channel->reqs);
 	sem_init(&channel->sem, 0, 0);
 
+	channel->sync = 1;
+	pthread_spin_init(&channel->lock, 0);
 	for (i = 0; i < max_ops; i++) {
 		TAILQ_INSERT_TAIL(&channel->reqs, &channel->req_mem[i], link);
 	}
@@ -480,7 +492,6 @@ fs_sync_channel_create(void *io_device, void *ctx_buf)
 {
 	struct spdk_filesystem		*fs;
 	struct spdk_fs_channel		*channel = ctx_buf;
-
 	fs = SPDK_CONTAINEROF(io_device, struct spdk_filesystem, sync_target);
 
 	return fs_channel_create(fs, channel, fs->sync_target.max_ops);
@@ -584,19 +595,19 @@ fs_alloc(struct spdk_bs_dev *dev, fs_send_request_fn send_request_fn)
 	fs->send_request = send_request_fn;
 	TAILQ_INIT(&fs->files);
 
-	fs->md_target.max_ops = 512;
+	fs->md_target.max_ops = 1024;
 	spdk_io_device_register(&fs->md_target, fs_md_channel_create, fs_channel_destroy,
 				sizeof(struct spdk_fs_channel), "blobfs_md");
 	fs->md_target.md_io_channel = spdk_get_io_channel(&fs->md_target);
 	fs->md_target.md_fs_channel = spdk_io_channel_get_ctx(fs->md_target.md_io_channel);
 
-	fs->sync_target.max_ops = 512;
+	fs->sync_target.max_ops = 1024;
 	spdk_io_device_register(&fs->sync_target, fs_sync_channel_create, fs_channel_destroy,
 				sizeof(struct spdk_fs_channel), "blobfs_sync");
 	fs->sync_target.sync_io_channel = spdk_get_io_channel(&fs->sync_target);
 	fs->sync_target.sync_fs_channel = spdk_io_channel_get_ctx(fs->sync_target.sync_io_channel);
 
-	fs->io_target.max_ops = 512;
+	fs->io_target.max_ops = 1024;
 	spdk_io_device_register(&fs->io_target, fs_io_channel_create, fs_channel_destroy,
 				sizeof(struct spdk_fs_channel), "blobfs_io");
 
@@ -612,6 +623,14 @@ __wake_caller(void *arg, int fserrno)
 	sem_post(args->sem);
 }
 
+static void
+__release_caller(void *arg, int fserrno)
+{
+	struct spdk_fs_cb_args *args = arg;
+
+	args->rc = fserrno;
+}
+
 void
 spdk_fs_init(struct spdk_bs_dev *dev, struct spdk_blobfs_opts *opt,
 	     fs_send_request_fn send_request_fn,
@@ -1289,6 +1308,7 @@ __fs_open_file_done(void *arg, struct spdk_file *file, int bserrno)
 	struct spdk_fs_cb_args *args = &req->args;
 
 	args->file = file;
+	args->rc = bserrno;
 	__wake_caller(args, bserrno);
 	SPDK_DEBUGLOG(SPDK_LOG_BLOBFS, "file=%s\n", args->op.open.name);
 }
@@ -1320,8 +1340,8 @@ spdk_fs_open_file(struct spdk_filesystem *fs, struct spdk_fs_thread_ctx *ctx,
 		SPDK_ERRLOG("Cannot allocate req for opening file=%s\n", name);
 		return -ENOMEM;
 	}
-
 	args = &req->args;
+	args->rc = -1;
 	args->fs = fs;
 	args->op.open.name = name;
 	args->op.open.flags = flags;
@@ -1749,7 +1769,9 @@ __rw_done(void *ctx, int bserrno)
 	struct spdk_fs_request *req = ctx;
 	struct spdk_fs_cb_args *args = &req->args;
 
-	spdk_free(args->op.rw.pin_buf);
+        if(args->fn.file_op == __rw_from_file_done){
+	    spdk_free(args->op.rw.pin_buf);
+        }
 	args->fn.file_op(args->arg, bserrno);
 	free_fs_request(req);
 }
@@ -1793,8 +1815,10 @@ __read_done(void *ctx, int bserrno)
 
 	assert(req != NULL);
 	buf = (void *)((uintptr_t)args->op.rw.pin_buf + (args->op.rw.offset & (args->op.rw.blocklen - 1)));
-	if (args->op.rw.is_read) {
-		_copy_buf_to_iovs(args->iovs, args->iovcnt, buf, args->op.rw.length);
+        if (args->op.rw.is_read) {
+		if(args->fn.file_op == __rw_from_file_done){
+			_copy_buf_to_iovs(args->iovs, args->iovcnt, buf, args->op.rw.length);
+		}
 		__rw_done(req, 0);
 	} else {
 		_copy_iovs_to_buf(buf, args->op.rw.length, args->iovs, args->iovcnt);
@@ -1892,8 +1916,13 @@ __readvwritev(struct spdk_file *file, struct spdk_io_channel *_channel,
 
 	pin_buf_length = num_lba * lba_size;
 	args->op.rw.length = pin_buf_length;
-	args->op.rw.pin_buf = spdk_malloc(pin_buf_length, lba_size, NULL,
-					  SPDK_ENV_SOCKET_ID_ANY, SPDK_MALLOC_DMA);
+
+    if(args->fn.file_op != __rw_from_file_done){
+        args->op.rw.pin_buf = iovs->iov_base;
+    }else{
+	    args->op.rw.pin_buf = spdk_malloc(pin_buf_length, lba_size, NULL,
+			  SPDK_ENV_SOCKET_ID_ANY, SPDK_MALLOC_DMA);
+    }
 	if (args->op.rw.pin_buf == NULL) {
 		SPDK_DEBUGLOG(SPDK_LOG_BLOBFS, "Failed to allocate buf for: file=%s offset=%jx length=%jx\n",
 			      file->name, offset, length);
@@ -2006,7 +2035,7 @@ spdk_fs_alloc_thread_ctx(struct spdk_filesystem *fs)
 		return NULL;
 	}
 
-	fs_channel_create(fs, &ctx->ch, 512);
+	fs_channel_create(fs, &ctx->ch, 1024);
 
 	ctx->ch.send_request = fs->send_request;
 	ctx->ch.sync = 1;
@@ -2282,7 +2311,6 @@ __file_flush_done(void *ctx, int bserrno)
 	struct cache_buffer *next = args->op.flush.cache_buffer;
 
 	BLOBFS_TRACE(file, "length=%jx\n", args->op.flush.length);
-
 	pthread_spin_lock(&file->lock);
 	next->in_progress = false;
 	next->bytes_flushed += args->op.flush.length;
@@ -2436,6 +2464,59 @@ __rw_from_file(void *ctx)
 	}
 }
 
+static void
+__rw_from_file2(void *ctx)
+{
+    struct spdk_fs_request *req = ctx;
+	struct spdk_fs_cb_args *args = &req->args;
+	struct spdk_file *file = args->file;
+
+	if (args->op.rw.is_read) {
+		spdk_file_read_async(file, file->fs->sync_target.sync_io_channel, args->iovs[0].iov_base,
+				     args->op.rw.offset, (uint64_t)args->iovs[0].iov_len,
+				     args->fn.file_op, args->arg);
+	} else {
+		spdk_file_write_async(file, file->fs->sync_target.sync_io_channel, args->iovs[0].iov_base,
+				      args->op.rw.offset, (uint64_t)args->iovs[0].iov_len,
+				      __rw_from_file_done, req);
+	}
+}
+
+struct SpdkFileIOContext{
+        void * data;
+};
+
+
+static int
+__send_rw_from_file_async(struct spdk_file *file, void *payload,
+		    uint64_t offset, uint64_t length, bool is_read,
+		    struct spdk_fs_channel *channel, spdk_file_op_complete cb_fn, void *cb_arg)
+{
+	struct spdk_fs_request *req;
+	struct spdk_fs_cb_args *args;
+
+    struct SpdkFileIOContext * spdk_ctx =
+        (struct SpdkFileIOContext *) cb_arg;
+	req = alloc_fs_request_with_iov(channel, 1);
+	if (req == NULL) {
+		sem_post(&channel->sem);
+		return -ENOMEM;
+	}
+
+    spdk_ctx->data = (void *)req;
+	args = &req->args;
+    args->fn.file_op = cb_fn;
+    args->arg = cb_arg;
+	args->file = file;
+	args->sem = &channel->sem;
+	args->iovs[0].iov_base = payload;
+	args->iovs[0].iov_len = (size_t)length;
+	args->op.rw.offset = offset;
+	args->op.rw.is_read = is_read;
+	file->fs->send_request(__rw_from_file2, req);
+	return 0;
+}
+
 static int
 __send_rw_from_file(struct spdk_file *file, void *payload,
 		    uint64_t offset, uint64_t length, bool is_read,
@@ -2461,6 +2542,7 @@ __send_rw_from_file(struct spdk_file *file, void *payload,
 	return 0;
 }
 
+#define WT_FLUSH
 int
 spdk_file_write(struct spdk_file *file, struct spdk_fs_thread_ctx *ctx,
 		void *payload, uint64_t offset, uint64_t length)
@@ -2518,12 +2600,14 @@ spdk_file_write(struct spdk_file *file, struct spdk_fs_thread_ctx *ctx,
 		}
 	}
 
+#ifdef WT_FLUSH
 	flush_req = alloc_fs_request(channel);
 	if (flush_req == NULL) {
 		pthread_spin_unlock(&file->lock);
 		return -ENOMEM;
 	}
 
+#endif
 	last = file->last;
 	rem_length = length;
 	cur_payload = payload;
@@ -2555,6 +2639,7 @@ spdk_file_write(struct spdk_file *file, struct spdk_fs_thread_ctx *ctx,
 
 	pthread_spin_unlock(&file->lock);
 
+#ifdef WT_FLUSH
 	if (cache_buffers_filled == 0) {
 		free_fs_request(flush_req);
 		return 0;
@@ -2562,6 +2647,7 @@ spdk_file_write(struct spdk_file *file, struct spdk_fs_thread_ctx *ctx,
 
 	flush_req->args.file = file;
 	file->fs->send_request(__file_flush, flush_req);
+#endif
 	return 0;
 }
 
@@ -2650,6 +2736,34 @@ check_readahead(struct spdk_file *file, uint64_t offset,
 	file->fs->send_request(__readahead, req);
 }
 
+void spdk_memcpy(void * dst, void *src, int len)
+{
+    memcpy(dst, src, len);
+}
+void spdk_sem_wait(sem_t * sem)
+{
+    sem_wait(sem);
+}
+
+int64_t
+spdk_file_read_directio(struct spdk_file *file, struct spdk_fs_thread_ctx *ctx,
+	       void *payload, uint64_t offset, uint64_t length){
+	 struct spdk_fs_channel *channel = (struct spdk_fs_channel *)ctx;
+	 if(!__send_rw_from_file(file, payload, offset, length, true, channel)){
+        spdk_sem_wait(&channel->sem);
+     }
+     return length;
+}
+
+int64_t
+spdk_file_read_async2(struct spdk_file *file, struct spdk_fs_thread_ctx *ctx,
+	       void *payload, uint64_t offset, uint64_t length, spdk_file_op_complete cb_fn, void *cb_arg){
+	 struct spdk_fs_channel *channel = (struct spdk_fs_channel *)ctx;
+	 int64_t rc = __send_rw_from_file_async(file, payload, offset, length, true, channel, cb_fn, cb_arg);
+
+	 return rc;
+}
+
 int64_t
 spdk_file_read(struct spdk_file *file, struct spdk_fs_thread_ctx *ctx,
 	       void *payload, uint64_t offset, uint64_t length)
@@ -2659,6 +2773,7 @@ spdk_file_read(struct spdk_file *file, struct spdk_fs_thread_ctx *ctx,
 	uint32_t sub_reads = 0;
 	struct cache_buffer *buf;
 	uint64_t read_len;
+	static int cache_hit = 0;
 	int rc = 0;
 
 	pthread_spin_lock(&file->lock);
@@ -2684,6 +2799,13 @@ spdk_file_read(struct spdk_file *file, struct spdk_fs_thread_ctx *ctx,
 	if (file->seq_byte_count >= CACHE_READAHEAD_THRESHOLD) {
 		check_readahead(file, offset, channel);
 		check_readahead(file, offset + CACHE_BUFFER_SIZE, channel);
+		check_readahead(file, offset + CACHE_BUFFER_SIZE * 2, channel);
+		check_readahead(file, offset + CACHE_BUFFER_SIZE * 3, channel);
+		check_readahead(file, offset + CACHE_BUFFER_SIZE * 4, channel);
+		check_readahead(file, offset - CACHE_BUFFER_SIZE, channel);
+		check_readahead(file, offset - CACHE_BUFFER_SIZE * 2, channel);
+		check_readahead(file, offset - CACHE_BUFFER_SIZE * 3, channel);
+		check_readahead(file, offset - CACHE_BUFFER_SIZE * 4, channel);
 	}
 
 	final_length = 0;
@@ -2708,8 +2830,9 @@ spdk_file_read(struct spdk_file *file, struct spdk_fs_thread_ctx *ctx,
 				read_len = buf->offset + buf->bytes_filled - offset;
 			}
 			BLOBFS_TRACE(file, "read %p offset=%ju length=%ju\n", payload, offset, read_len);
-			memcpy(payload, &buf->buf[offset - buf->offset], read_len);
-			if ((offset + read_len) % CACHE_BUFFER_SIZE == 0) {
+			spdk_memcpy(payload, &buf->buf[offset - buf->offset], read_len);
+			if (0 && (offset + read_len) % CACHE_BUFFER_SIZE == 0) {
+				SPDK_DEBUGLOG(SPDK_LOG_BLOBFS, "tree_remove_buffer: f %p offset %ld length %ld\n", file, buf->offset, buf->bytes_filled);
 				tree_remove_buffer(file->tree, buf);
 				if (file->tree->present_mask == 0) {
 					spdk_thread_send_msg(g_cache_pool_thread, _remove_file_from_cache_pool, file);
@@ -2727,7 +2850,7 @@ spdk_file_read(struct spdk_file *file, struct spdk_fs_thread_ctx *ctx,
 	}
 	pthread_spin_unlock(&file->lock);
 	while (sub_reads > 0) {
-		sem_wait(&channel->sem);
+		spdk_sem_wait(&channel->sem);
 		sub_reads--;
 	}
 	if (rc == 0) {
@@ -2906,6 +3029,7 @@ __file_close(void *arg)
 	__file_close_async(file, req);
 }
 
+#define SPDK_FILE_IO_UNDEFINED_ERRNO    150
 int
 spdk_file_close(struct spdk_file *file, struct spdk_fs_thread_ctx *ctx)
 {
@@ -2916,19 +3040,24 @@ spdk_file_close(struct spdk_file *file, struct spdk_fs_thread_ctx *ctx)
 	req = alloc_fs_request(channel);
 	if (req == NULL) {
 		SPDK_ERRLOG("Cannot allocate close req for file=%s\n", file->name);
+        pthread_spin_unlock(&file->lock);
 		return -ENOMEM;
 	}
 
 	args = &req->args;
-
+	args->rc = -SPDK_FILE_IO_UNDEFINED_ERRNO; //some undefined errno
 	spdk_file_sync(file, ctx);
 	BLOBFS_TRACE(file, "name=%s\n", file->name);
 	args->file = file;
 	args->sem = &channel->sem;
-	args->fn.file_op = __wake_caller;
+	//args->fn.file_op = __wake_caller;
+	args->fn.file_op = __release_caller;
 	args->arg = args;
 	channel->send_request(__file_close, req);
-	sem_wait(&channel->sem);
+	//sem_wait(&channel->sem);
+
+	while(args->rc == -SPDK_FILE_IO_UNDEFINED_ERRNO)
+		usleep(100);
 
 	return args->rc;
 }
diff --git a/lib/rocksdb/blobfs.2.h b/lib/rocksdb/blobfs.2.h
new file mode 100644
index 0000000..ba66f6c
--- /dev/null
+++ b/lib/rocksdb/blobfs.2.h
@@ -0,0 +1,70 @@
+#ifndef SPDK_BLOBFS_H
+#define SPDK_BLOBFS_H
+
+#include "spdk/stdinc.h"
+
+#include "spdk/blob.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+struct spdk_file {
+	struct spdk_filesystem	*fs;
+	struct spdk_blob	*blob;
+	char			*name;
+	uint64_t		trace_arg_name;
+	uint64_t		length;
+	bool                    is_deleted;
+	bool			open_for_writing;
+	uint64_t		length_flushed;
+	uint64_t		length_xattr;
+	uint64_t		append_pos;
+	uint64_t		seq_byte_count;
+	uint64_t		next_seq_offset;
+	uint32_t		priority;
+	TAILQ_ENTRY(spdk_file)	tailq;
+	spdk_blob_id		blobid;
+	uint32_t		ref_count;
+	pthread_spinlock_t	lock;
+	struct cache_buffer	*last;
+	struct cache_tree	*tree;
+	TAILQ_HEAD(open_requests_head, spdk_fs_request) open_requests;
+	TAILQ_HEAD(sync_requests_head, spdk_fs_request) sync_requests;
+	TAILQ_ENTRY(spdk_file)	cache_tailq;
+};
+
+struct spdk_deleted_file {
+	spdk_blob_id	id;
+	TAILQ_ENTRY(spdk_deleted_file)	tailq;
+};
+
+struct spdk_filesystem {
+	struct spdk_blob_store	*bs;
+	TAILQ_HEAD(, spdk_file)	files;
+	struct spdk_bs_opts	bs_opts;
+	struct spdk_bs_dev	*bdev;
+	fs_send_request_fn	send_request;
+
+	struct {
+		uint32_t		max_ops;
+		struct spdk_io_channel	*sync_io_channel;
+		struct spdk_fs_channel	*sync_fs_channel;
+	} sync_target;
+
+	struct {
+		uint32_t		max_ops;
+		struct spdk_io_channel	*md_io_channel;
+		struct spdk_fs_channel	*md_fs_channel;
+	} md_target;
+
+	struct {
+		uint32_t		max_ops;
+	} io_target;
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* SPDK_BLOBFS_H_ */
diff --git a/lib/rocksdb/env_spdk.cc b/lib/rocksdb/env_spdk.cc
index 8695acc..adce207 100644
--- a/lib/rocksdb/env_spdk.cc
+++ b/lib/rocksdb/env_spdk.cc
@@ -31,10 +31,14 @@
  *   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
+#include <sched.h>
+#include <sys/types.h>
+
 #include "rocksdb/env.h"
 #include <set>
 #include <iostream>
 #include <stdexcept>
+#include <unordered_map>
 
 extern "C" {
 #include "spdk/env.h"
@@ -47,6 +51,7 @@ extern "C" {
 #include "spdk/bdev.h"
 
 #include "spdk_internal/thread.h"
+#include "blobfs.2.h"
 }
 
 namespace rocksdb
@@ -55,10 +60,18 @@ namespace rocksdb
 struct spdk_filesystem *g_fs = NULL;
 struct spdk_bs_dev *g_bs_dev;
 uint32_t g_lcore = 0;
+std::unordered_map<pthread_t, uint32_t> th2core;
 std::string g_bdev_name;
 volatile bool g_spdk_ready = false;
 volatile bool g_spdk_start_failure = false;
 
+//#define RDB_SPDK_MEMPOOL
+
+#ifndef RDB_SPDK_MEMPOOL
+#else
+struct spdk_mempool * g_rdb_mempool = NULL;
+#endif
+
 void SpdkInitializeThread(void);
 
 class SpdkThreadCtx
@@ -111,7 +124,36 @@ static void
 __send_request(fs_request_fn fn, void *arg)
 {
 	struct spdk_event *event;
+    uint32_t core_id = 0;
+    static uint32_t prev_core_id = 0xFFFF;
+    pthread_t tid = pthread_self();
+    if(th2core.count(tid)){
+        core_id = th2core[tid];
+        prev_core_id = core_id;
+    }else{
+        if(prev_core_id == 0xFFFF){
+            prev_core_id = core_id = g_lcore;
+            th2core[tid] = core_id;
+        }else{
+            core_id = spdk_env_get_next_core(prev_core_id);
+            if(core_id == UINT32_MAX){
+                printf("spdk_env_get_next_core return UINT32_MAX!\n");
+                core_id = prev_core_id;
+            }
+            th2core[tid] = core_id;
+            prev_core_id = core_id;
+        }
+    }
+   //printf("__send_request tid %d core %d\n", tid, core_id);
+   //	event = spdk_event_allocate(core_id, __call_fn, (void *)fn, arg);
+   // 	spdk_event_call(event);
+}
 
+static void
+__send_request_one_core(fs_request_fn fn, void *arg)
+{
+	struct spdk_event *event;
+    uint32_t core_id = g_lcore;
 	event = spdk_event_allocate(g_lcore, __call_fn, (void *)fn, arg);
 	spdk_event_call(event);
 }
@@ -201,12 +243,32 @@ SpdkSequentialFile::InvalidateCache(__attribute__((unused)) size_t offset,
 class SpdkRandomAccessFile : public RandomAccessFile
 {
 	struct spdk_file *mFile;
+
+    struct SpdkRandomAccessFileContext{
+        void * data;
+        const RandomAccessCallback cb;
+        struct spdk_file * file;
+        uint64_t offset;
+        char* buffer;
+        size_t byte_read;
+        SpdkRandomAccessFileContext(
+            const RandomAccessCallback racb,
+            struct spdk_file * f,
+            uint64_t f_offset, char * data_buf, size_t nr_read)
+            :cb(racb), file(f),
+            offset(f_offset), buffer(data_buf), byte_read(nr_read), data(NULL){}
+    };
+
 public:
 	SpdkRandomAccessFile(struct spdk_file *file) : mFile(file) {}
 	virtual ~SpdkRandomAccessFile();
 
 	virtual Status Read(uint64_t offset, size_t n, Slice *result, char *scratch) const override;
 	virtual Status InvalidateCache(size_t offset, size_t length) override;
+    static void AsyncReadCallback(void* ctx, int bserrno);
+    virtual Status RequestRead(const RandomAccessCallback& cb,
+    uint64_t offset, size_t n, Slice* result, char* scratch) const override;
+
 };
 
 SpdkRandomAccessFile::~SpdkRandomAccessFile(void)
@@ -221,6 +283,9 @@ SpdkRandomAccessFile::Read(uint64_t offset, size_t n, Slice *result, char *scrat
 	int64_t rc;
 
 	set_channel();
+	//printf("SpdkRandomAccessFile::Read g_sync_args.channel %p,  sync_target.sync_io_channel %p\n",
+	//	g_sync_args.channel, mFile->fs->sync_target.sync_io_channel);
+	//rc = spdk_file_read_directio(mFile, g_sync_args.channel, scratch, offset, n);
 	rc = spdk_file_read(mFile, g_sync_args.channel, scratch, offset, n);
 	if (rc >= 0) {
 		*result = Slice(scratch, n);
@@ -232,6 +297,41 @@ SpdkRandomAccessFile::Read(uint64_t offset, size_t n, Slice *result, char *scrat
 }
 
 Status
+SpdkRandomAccessFile::RequestRead(const RandomAccessCallback& cb,
+    uint64_t offset, size_t n, Slice* result, char* scratch) const {
+    Status s;
+    static int cnt = 0;
+    set_channel();
+
+    SpdkRandomAccessFileContext * ctx =
+        new SpdkRandomAccessFileContext(cb, mFile, offset, scratch, n);
+    //printf("RequestRead: ctx %p file %p name %s offset %ld nr_read %d scratch %p elem %p heap %p\n",
+    //		ctx, mFile, mFile->name, offset, n, scratch, elem, elem->heap);
+    spdk_file_read_async2(mFile, g_sync_args.channel, scratch, offset, n,
+        AsyncReadCallback, (void *)ctx);
+
+    return Status::IOPending();
+}
+
+void
+SpdkRandomAccessFile::AsyncReadCallback(void* ctx, int bserrno){
+    struct SpdkRandomAccessFileContext * spdk_ctx =
+        (struct SpdkRandomAccessFileContext *)ctx;
+    Status s;
+    Slice slice(spdk_ctx->buffer + (spdk_ctx->offset & 511), spdk_ctx->byte_read);
+    if(!bserrno)
+        s.async(true);
+
+    // printf("AsyncReadCallback: cpu %d ctx %p file %s buffer %p elem %p heap %p offset %ld nr_read %d errno %d\n",
+    //    sched_getcpu(), spdk_ctx, spdk_ctx->file->name, spdk_ctx->buffer, elem, elem->heap, spdk_ctx->offset, spdk_ctx->byte_read, bserrno);
+
+    spdk_free_fs_request(spdk_ctx->data);
+    spdk_ctx->cb.Invoke(s, slice);
+
+    delete spdk_ctx;
+}
+
+Status
 SpdkRandomAccessFile::InvalidateCache(__attribute__((unused)) size_t offset,
 				      __attribute__((unused)) size_t length)
 {
@@ -276,6 +376,7 @@ public:
 	virtual Status Close() override
 	{
 		set_channel();
+		//printf("spdk_file_close %s\n", mFile->name);
 		spdk_file_close(mFile, g_sync_args.channel);
 		mFile = NULL;
 		return Status::OK();
@@ -290,6 +391,7 @@ public:
 		int rc;
 
 		set_channel();
+		//printf("env_spdk Sync %s\n", mFile->name);
 		rc = spdk_file_sync(mFile, g_sync_args.channel);
 		if (!rc) {
 			return Status::OK();
@@ -303,6 +405,7 @@ public:
 		int rc;
 
 		set_channel();
+		//printf("env_spdk Fsync %s\n", mFile->name);
 		rc = spdk_file_sync(mFile, g_sync_args.channel);
 		if (!rc) {
 			return Status::OK();
@@ -374,6 +477,10 @@ SpdkWritableFile::Append(const Slice &data)
 	int64_t rc;
 
 	set_channel();
+	if(0 && data.size() > 0x100000){
+		printf("Append %s offset 0x%x size 0x%x\n", mFile->name, mSize, data.size());
+	//	set_channel();
+	}
 	rc = spdk_file_write(mFile, g_sync_args.channel, (void *)data.data(), mSize, data.size());
 	if (rc >= 0) {
 		mSize += data.size();
@@ -410,7 +517,8 @@ private:
 	std::string mBdev;
 
 public:
-	SpdkEnv(Env *base_env, const std::string &dir, const std::string &conf,
+	SpdkEnv(Env *base_env, const std::string &dir,
+		const std::string &cpumask,  const std::string &conf,
 		const std::string &bdev, uint64_t cache_size_in_mb);
 
 	virtual ~SpdkEnv();
@@ -557,6 +665,7 @@ public:
 		std::string name = sanitize_path(fname, mDirectory);
 
 		set_channel();
+		//printf("DeleteFile %s\n", name.c_str());
 		rc = spdk_fs_delete_file(g_fs, g_sync_args.channel, name.c_str());
 		if (rc == -ENOENT) {
 			return EnvWrapper::DeleteFile(fname);
@@ -641,7 +750,6 @@ public:
 void SpdkInitializeThread(void)
 {
 	struct spdk_thread *thread;
-
 	if (g_fs != NULL) {
 		if (g_sync_args.channel) {
 			spdk_fs_free_thread_ctx(g_sync_args.channel);
@@ -677,8 +785,8 @@ rocksdb_run(__attribute__((unused)) void *arg1)
 	g_lcore = spdk_env_get_first_core();
 
 	g_bs_dev = spdk_bdev_create_bs_dev(bdev, NULL, NULL);
-	printf("using bdev %s\n", g_bdev_name.c_str());
-	spdk_fs_load(g_bs_dev, __send_request, fs_load_cb, NULL);
+	printf("using bdev %s nr_count %d\n", g_bdev_name.c_str(), spdk_env_get_core_count());
+	spdk_fs_load(g_bs_dev, __send_request_one_core, fs_load_cb, NULL);
 }
 
 static void
@@ -725,7 +833,8 @@ initialize_spdk(void *arg)
 
 }
 
-SpdkEnv::SpdkEnv(Env *base_env, const std::string &dir, const std::string &conf,
+SpdkEnv::SpdkEnv(Env *base_env, const std::string &dir,
+        const std::string &cpumask, const std::string &conf,
 		 const std::string &bdev, uint64_t cache_size_in_mb)
 	: EnvWrapper(base_env), mDirectory(dir), mConfig(conf), mBdev(bdev)
 {
@@ -735,10 +844,10 @@ SpdkEnv::SpdkEnv(Env *base_env, const std::string &dir, const std::string &conf,
 	opts->name = "rocksdb";
 	opts->config_file = mConfig.c_str();
 	opts->shutdown_cb = rocksdb_shutdown;
-
+	opts->reactor_mask = cpumask.c_str();
+	//printf("spdk_fs_set_cache_size: cache_size_in_mb %d\n", cache_size_in_mb);
 	spdk_fs_set_cache_size(cache_size_in_mb);
 	g_bdev_name = mBdev;
-
 	pthread_create(&mSpdkTid, NULL, &initialize_spdk, opts);
 	while (!g_spdk_ready && !g_spdk_start_failure)
 		;
@@ -746,7 +855,12 @@ SpdkEnv::SpdkEnv(Env *base_env, const std::string &dir, const std::string &conf,
 		delete opts;
 		throw SpdkAppStartException("spdk_app_start() unable to start rocksdb_run()");
 	}
-
+#ifndef RDB_SPDK_MEMPOOL
+#else
+	g_rdb_mempool = spdk_mempool_create("rdb_mempool", 2048, 1048576 + 1024, \
+                                   SIZE_MAX,
+                                   SPDK_ENV_SOCKET_ID_ANY);
+#endif
 	SpdkInitializeThread();
 }
 
@@ -773,13 +887,20 @@ SpdkEnv::~SpdkEnv()
 
 	spdk_app_start_shutdown();
 	pthread_join(mSpdkTid, NULL);
+#ifndef RDB_SPDK_MEMPOOL
+#else
+	if(g_rdb_mempool)
+		spdk_mempool_free(g_rdb_mempool);
+#endif
+
 }
 
-Env *NewSpdkEnv(Env *base_env, const std::string &dir, const std::string &conf,
+Env *NewSpdkEnv(Env *base_env, const std::string &dir,
+        const std::string & cpumask, const std::string &conf,
 		const std::string &bdev, uint64_t cache_size_in_mb)
 {
 	try {
-		SpdkEnv *spdk_env = new SpdkEnv(base_env, dir, conf, bdev, cache_size_in_mb);
+		SpdkEnv *spdk_env = new SpdkEnv(base_env, dir, cpumask, conf, bdev, cache_size_in_mb);
 		if (g_fs != NULL) {
 			return spdk_env;
 		} else {
-- 
1.8.3.1

