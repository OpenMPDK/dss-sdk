variables:
  BRANCH_NAME: $CI_COMMIT_BRANCH
  SONAR_BRANCH: -Dsonar.branch.name=$CI_COMMIT_BRANCH
  UNIT_TEST_REPORT: df_out/reports/sonar_qube_ut_coverage_report.xml

image:
  name: dss-build_$BRANCH_NAME

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      variables:
        BRANCH_NAME: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME
        SONAR_BRANCH: ''
    - if: $CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE == "push"
    - if: $CI_COMMIT_BRANCH =~ /^(stable|feature)\/.*/ && $CI_PIPELINE_SOURCE == "push"

stages:
  - build
  - scan
  - lint

build dss-sdk:
  stage: build
  script:
    - build-wrapper-linux-x86-64 --out-dir bw-output/ ./scripts/build_all.sh kdd-samsung-remote
    - /stagemergeartifacts.sh
  artifacts:
    name: release artifacts
    paths:
      - df_out/nkv-target-*.tgz
      - host_out/nkv-sdk-bin-*.tgz
  variables:
    DSSGLOBLIST: "nkv-sdk-*.tgz nkv-target-*.tgz"
    GIT_SUBMODULE_STRATEGY: recursive
  cache:
    key: release-$CI_PIPELINE_ID
    paths:
     - bw-output
     - df_out
     - host_out
    policy: push

build target gcov and unit tests:
  stage: build
  script:
    - ./target/build.sh --run-tests --with-coverage
    - sed -i -r 's/path="/path="target\//g' $UNIT_TEST_REPORT
  artifacts:
    name: gcov coverage report
    paths:
      - $UNIT_TEST_REPORT
  variables:
    GIT_SUBMODULE_STRATEGY: recursive

sonar-scanner:
  stage: scan
  script:
    - sonar-scanner -Dsonar.qualitygate.wait=true -Dsonar.cfamily.build-wrapper-output=bw-output -Dsonar.coverageReportPaths=$UNIT_TEST_REPORT
  allow_failure: true
  cache:
    - key: release-$CI_PIPELINE_ID
      paths:
        - bw-output
        - df_out
        - host_out
      policy: pull

pycodestyle:
  stage: lint
  script: git ls-files '*.py' | xargs -n1 pycodestyle --config=./scripts/pycodestyle --show-source --show-pep8
  cache: []
  needs: []

shellcheck:
  stage: lint
  script: git ls-files '*.sh' | xargs -n1 shellcheck
  cache: []
  needs: []
